###############################################################################
#
# IAR C/C++ Compiler V7.12.1.987/W32 for MSP430           16/Jun/2020  19:26:10
# Copyright 1996-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Johnathan\OneDrive - North Carolina State
#        University\auto_tank\RTCS\src\HEXtoBCD_Timer.c
#    Command line  =  
#        -f C:\Users\JOHNAT~1\AppData\Local\Temp\EW7891.tmp
#        ("C:\Users\Johnathan\OneDrive - North Carolina State
#        University\auto_tank\RTCS\src\HEXtoBCD_Timer.c" -lC
#        "C:\Users\Johnathan\OneDrive - North Carolina State
#        University\auto_tank\RTCS\Debug\List" -o "C:\Users\Johnathan\OneDrive
#        - North Carolina State University\auto_tank\RTCS\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\430\lib\dlib\dl430xlsfn.h" -I
#        ./\ -I "C:\Users\Johnathan\OneDrive - North Carolina State
#        University\auto_tank\RTCS\include\" -I "C:\Users\Johnathan\OneDrive -
#        North Carolina State University\auto_tank\RTCS\src\" --core=430X
#        --data_model=small -On --multiplier=32 --hw_workaround=CPU40
#        --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\Johnathan\OneDrive - North Carolina State
#        University\auto_tank\RTCS\Debug\List\HEXtoBCD_Timer.lst
#    Object file   =  
#        C:\Users\Johnathan\OneDrive - North Carolina State
#        University\auto_tank\RTCS\Debug\Obj\HEXtoBCD_Timer.r43
#
###############################################################################

C:\Users\Johnathan\OneDrive - North Carolina State University\auto_tank\RTCS\src\HEXtoBCD_Timer.c
      1          //******************************************************************************
      2          // File Name: HEXtoBCD.c
      3          // Description: This file contains the code to convert hexadecimal values into
      4          // Binary-coded Decimal values
      5          // Author: Johnathan Wilder
      6          // Date: May 2019
      7          // Compiler: Built with IAR Embedded Workbench Version: V4.10A/W32 (7.11.2)
      8          //******************************************************************************
      9          
     10          #include "msp430.h"
     11          #include "Functions.h"
     12          #include "Macros.h"
     13          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     14          unsigned int timer_value_hex;
   \                     timer_value_hex:
   \   000000                DS8 2

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     15          char adc_char_timer[ELEVEN] = {' ',' ',' ',' ',' ', '.',' ',' ',' ',' ',0};
   \                     adc_char_timer:
   \   000000                DS8 11
   \   00000B                REQUIRE `?<Initializer for adc_char_timer>`
     16          

   \                                 In  segment CODE, align 2
     17          void HEXtoBCD_timer(unsigned int timer_value_hex){
   \                     HEXtoBCD_timer:
     18          		int value = ZERO;
   \   000000   0F43         MOV.W   #0x0, R15
     19          
     20          		while (timer_value_hex > 999){
   \                     ??HEXtoBCD_timer_0:
   \   000002   3C90E803     CMP.W   #0x3e8, R12
   \   000006   0428         JNC     ??HEXtoBCD_timer_3
     21          			timer_value_hex = timer_value_hex - 1000;
   \   000008   3C5018FC     ADD.W   #0xfc18, R12
     22          			value++;
   \   00000C   1F53         ADD.W   #0x1, R15
   \   00000E   F93F         JMP     ??HEXtoBCD_timer_0
     23          		}
     24          		adc_char_timer[TWO] = 0x30 + value;
   \                     ??HEXtoBCD_timer_3:
   \   000010   0E12         PUSH.W  R14
   \   000012   C14F0000     MOV.B   R15, 0(SP)
   \   000016   3E41         POP.W   R14
   \   000018   7E503000     ADD.B   #0x30, R14
   \   00001C   C24E....     MOV.B   R14, &adc_char_timer + 2
     25          		value = ZERO;
   \   000020   0F43         MOV.W   #0x0, R15
     26          
     27          		while (timer_value_hex > 99){
   \                     ??HEXtoBCD_timer_1:
   \   000022   3C906400     CMP.W   #0x64, R12
   \   000026   0428         JNC     ??HEXtoBCD_timer_4
     28          			timer_value_hex = timer_value_hex - 100;
   \   000028   3C509CFF     ADD.W   #0xff9c, R12
     29          			value++;
   \   00002C   1F53         ADD.W   #0x1, R15
   \   00002E   F93F         JMP     ??HEXtoBCD_timer_1
     30          		}
     31          		adc_char_timer[THREE] = 0x30 + value;
   \                     ??HEXtoBCD_timer_4:
   \   000030   0E12         PUSH.W  R14
   \   000032   C14F0000     MOV.B   R15, 0(SP)
   \   000036   3E41         POP.W   R14
   \   000038   7E503000     ADD.B   #0x30, R14
   \   00003C   C24E....     MOV.B   R14, &adc_char_timer + 3
     32          		value = ZERO;
   \   000040   0F43         MOV.W   #0x0, R15
     33          
     34          		while (timer_value_hex > 9){
   \                     ??HEXtoBCD_timer_2:
   \   000042   3C900A00     CMP.W   #0xa, R12
   \   000046   0428         JNC     ??HEXtoBCD_timer_5
     35          			timer_value_hex = timer_value_hex - 10;
   \   000048   3C50F6FF     ADD.W   #0xfff6, R12
     36          			value++;
   \   00004C   1F53         ADD.W   #0x1, R15
   \   00004E   F93F         JMP     ??HEXtoBCD_timer_2
     37          		}
     38          		adc_char_timer[FOUR] = 0x30 + value;
   \                     ??HEXtoBCD_timer_5:
   \   000050   0E12         PUSH.W  R14
   \   000052   C14F0000     MOV.B   R15, 0(SP)
   \   000056   3E41         POP.W   R14
   \   000058   7E503000     ADD.B   #0x30, R14
   \   00005C   C24E....     MOV.B   R14, &adc_char_timer + 4
     39          		adc_char_timer[SIX] = 0x30 + timer_value_hex;
   \   000060   0E12         PUSH.W  R14
   \   000062   C14C0000     MOV.B   R12, 0(SP)
   \   000066   3E41         POP.W   R14
   \   000068   7E503000     ADD.B   #0x30, R14
   \   00006C   C24E....     MOV.B   R14, &adc_char_timer + 6
     40          		value = ZERO;
   \   000070   0F43         MOV.W   #0x0, R15
     41          }
   \   000072   1001         RETA

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for adc_char_timer>`:
   \   000000   20202020202E DC8 32, 32, 32, 32, 32, 46, 32, 32, 32, 32, 0
   \            2020202000  

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      6   HEXtoBCD_timer


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Initializer for adc_char_timer>
     116  HEXtoBCD_timer
      11  adc_char_timer
       2  timer_value_hex

 
 116 bytes in segment CODE
  11 bytes in segment DATA16_I
  11 bytes in segment DATA16_ID
   2 bytes in segment DATA16_Z
 
 116 bytes of CODE  memory
  11 bytes of CONST memory
  13 bytes of DATA  memory

Errors: none
Warnings: none
