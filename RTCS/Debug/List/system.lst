###############################################################################
#
# IAR C/C++ Compiler V7.12.1.987/W32 for MSP430           12/Jun/2020  10:08:08
# Copyright 1996-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Johnathan\OneDrive - North Carolina State
#        University\auto_tank\RTCS\src\system.c
#    Command line  =  
#        -f C:\Users\JOHNAT~1\AppData\Local\Temp\EWCC2.tmp
#        ("C:\Users\Johnathan\OneDrive - North Carolina State
#        University\auto_tank\RTCS\src\system.c" -lC
#        "C:\Users\Johnathan\OneDrive - North Carolina State
#        University\auto_tank\RTCS\Debug\List" -o "C:\Users\Johnathan\OneDrive
#        - North Carolina State University\auto_tank\RTCS\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\430\lib\dlib\dl430xlsfn.h" -I
#        ./\ -I "C:\Users\Johnathan\OneDrive - North Carolina State
#        University\auto_tank\RTCS\include\" -I "C:\Users\Johnathan\OneDrive -
#        North Carolina State University\auto_tank\RTCS\src\" --core=430X
#        --data_model=small -On --multiplier=32 --hw_workaround=CPU40
#        --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\Johnathan\OneDrive - North Carolina State
#        University\auto_tank\RTCS\Debug\List\system.lst
#    Object file   =  
#        C:\Users\Johnathan\OneDrive - North Carolina State
#        University\auto_tank\RTCS\Debug\Obj\system.r43
#
###############################################################################

C:\Users\Johnathan\OneDrive - North Carolina State University\auto_tank\RTCS\src\system.c
      1          //******************************************************************************
      2          // File Name: system.c
      3          // Description: This file contains the Main Routine - "While" Operating System
      4          // Author: Johnathan Wilder
      5          // Date: May 2019
      6          // Built with IAR Embedded Workbench Version: V4.10A/W32 (7.11.2)
      7          //******************************************************************************
      8          
      9          #include "msp430.h"
     10          #include "Functions.h"
     11          #include "Macros.h"
     12          
     13          void enable_interrupts(void);
     14          
     15          //------------------------------------------------------------------------------
     16          // System Configurations
     17          
     18          // Tells the compiler to provide the value in reg as an input to an
     19          // inline assembly block.  Even though the block contains no instructions,
     20          // the compiler may not optimize it away, and is told that the value
     21          // may change and should not be relied upon.
     22          
     23          //inline void READ_AND_DISCARD(unsigned int reg) __attribute__((always_inline));
     24          //void READ_AND_DISCARD(unsigned int reg){
     25          //  asm volatile ("" : "=m" (reg) : "r" (reg));
     26          //}
     27          
     28          //inline void enable_interrupts(void) __attribute__((always_inline));

   \                                 In  segment CODE, align 2
     29          void enable_interrupts(void){
   \                     enable_interrupts:
     30            __bis_SR_register(GIE);     // enable interrupts
   \   000000   0343         NOP
   \   000002   32D2         BIS.W   #0x8, SR
     31          //  asm volatile ("eint \n");
     32          }
   \   000004   1001         RETA
     33          
     34          //inline void disable_interrupts(void) __attribute__((always_inline));
     35          //void disable_interrupts(void){
     36          //  asm volatile ("dint \n");
     37          //}

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   enable_interrupts


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  enable_interrupts

 
 6 bytes in segment CODE
 
 6 bytes of CODE memory

Errors: none
Warnings: none
