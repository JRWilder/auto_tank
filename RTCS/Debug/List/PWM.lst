###############################################################################
#
# IAR C/C++ Compiler V7.12.1.987/W32 for MSP430           17/Aug/2019  11:54:17
# Copyright 1996-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\jrwilde2\OneDrive - North Carolina State
#        University\Spring_2019\ECE_306\Projects\Project10\Code\PWM.c
#    Command line  =  
#        -f C:\Users\jrwilde2\AppData\Local\Temp\EWCC89.tmp
#        ("C:\Users\jrwilde2\OneDrive - North Carolina State
#        University\Spring_2019\ECE_306\Projects\Project10\Code\PWM.c" -lC
#        "C:\Users\jrwilde2\OneDrive - North Carolina State
#        University\Spring_2019\ECE_306\Projects\Project10\Code\Debug\List" -o
#        "C:\Users\jrwilde2\OneDrive - North Carolina State
#        University\Spring_2019\ECE_306\Projects\Project10\Code\Debug\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\430\lib\dlib\dl430xlsfn.h" -I
#        ./\ --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\jrwilde2\OneDrive - North Carolina State
#        University\Spring_2019\ECE_306\Projects\Project10\Code\Debug\List\PWM.lst
#    Object file   =  
#        C:\Users\jrwilde2\OneDrive - North Carolina State
#        University\Spring_2019\ECE_306\Projects\Project10\Code\Debug\Obj\PWM.r43
#
###############################################################################

C:\Users\jrwilde2\OneDrive - North Carolina State University\Spring_2019\ECE_306\Projects\Project10\Code\PWM.c
      1          //******************************************************************************
      2          // File Name: PWM.c
      3          // Description: This file contains the code that controls how the autonomous car
      4          // will move.
      5          // Author: Johnathan Wilder
      6          // Date: May 2019
      7          // Built with IAR Embedded Workbench Version: V4.10A/W32 (7.11.2)
      8          //******************************************************************************
      9          
     10          #include "msp430.h"

   \                                 In  segment DATA16_AN, at 0x454
   \   union <unnamed> _A_TB3CCR1_L
   \                     _A_TB3CCR1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x456
   \   union <unnamed> _A_TB3CCR2_L
   \                     _A_TB3CCR2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x458
   \   union <unnamed> _A_TB3CCR3_L
   \                     _A_TB3CCR3_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x45a
   \   union <unnamed> _A_TB3CCR4_L
   \                     _A_TB3CCR4_L:
   \   000000                DS8 2
     11          #include "Functions.h"
     12          #include "Macros.h"
     13          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     14          unsigned int pwm_delay;
   \                     pwm_delay:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     15          unsigned int pwm_count;
   \                     pwm_count:
   \   000000                DS8 2
     16          
     17          /*
     18          Full battery
     19          STRAIGHT: 40, 50
     20          REVERSE: 30, 40
     21          CW: 20, 30
     22          CCW: 30, 40
     23          ARC_RIGHT: 60, 30
     24          ARC_LEFT: 30, 70
     25          */
     26          
     27          /*used batteries
     28          STRAIGHT: 40, 60
     29          REVERSE: 30, 40
     30          CW: 20, 30
     31          CCW: 30, 40
     32          ARC_RIGHT: 60, 30
     33          ARC_LEFT: 30, 70
     34          */
     35          

   \                                 In  segment CODE, align 2
     36          void pwm(unsigned int operation_state){
   \                     pwm:
     37          	/*if(operation == PWM){
     38          		if(reset_op != HIGH){
     39          			operation_state = v_thumb/DIVISOR;
     40          			displays(operation*DIVISOR);
     41          		}
     42          	}*/
     43          	switch(operation_state){
   \   000000   0F4C         MOV.W   R12, R15
   \   000002   0F83         SUB.W   #0x0, R15
   \   000004   1325         JEQ     ??pwm_1
   \   000006   1F83         SUB.W   #0x1, R15
   \   000008   2024         JEQ     ??pwm_12
   \   00000A   1F83         SUB.W   #0x1, R15
   \   00000C   3724         JEQ     ??pwm_13
   \   00000E   1F83         SUB.W   #0x1, R15
   \   000010   3824         JEQ     ??pwm_14
   \   000012   1F83         SUB.W   #0x1, R15
   \   000014   4F24         JEQ     ??pwm_15
   \   000016   1F83         SUB.W   #0x1, R15
   \   000018   5024         JEQ     ??pwm_16
   \   00001A   1F83         SUB.W   #0x1, R15
   \   00001C   6724         JEQ     ??pwm_17
   \   00001E   1F83         SUB.W   #0x1, R15
   \   000020   6824         JEQ     ??pwm_18
   \   000022   1F83         SUB.W   #0x1, R15
   \   000024   7F24         JEQ     ??pwm_19
   \   000026   1F83         SUB.W   #0x1, R15
   \   000028   8024         JEQ     ??pwm_20
   \   00002A   1F83         SUB.W   #0x1, R15
   \   00002C   9524         JEQ     ??pwm_21
   \   00002E   2F83         SUB.W   #0x2, R15
   \   000030   AD24         JEQ     ??pwm_22
   \   000032   2F83         SUB.W   #0x2, R15
   \   000034   C724         JEQ     ??pwm_23
   \   000036   3F800300     SUB.W   #0x3, R15
   \   00003A   9124         JEQ     ??pwm_24
   \   00003C   2F83         SUB.W   #0x2, R15
   \   00003E   A924         JEQ     ??pwm_25
   \   000040   2F83         SUB.W   #0x2, R15
   \   000042   C324         JEQ     ??pwm_26
   \   000044   1F83         SUB.W   #0x1, R15
   \   000046   DA24         JEQ     ??pwm_27
   \   000048   EE3C         JMP     ??pwm_11
     44          		case ZERO://Setup
     45          			break;
     46          		case STRAIGHT:
     47          			if(RIGHT_REVERSE_SPEED != WHEEL_OFF){
   \                     ??pwm_12:
   \   00004A   82935804     CMP.W   #0x0, &0x458
   \   00004E   0224         JEQ     ??pwm_28
     48          				RIGHT_REVERSE_SPEED = WHEEL_OFF;
   \   000050   82435804     MOV.W   #0x0, &0x458
     49          			}
     50          			if(LEFT_REVERSE_SPEED != WHEEL_OFF){
   \                     ??pwm_28:
   \   000054   82935A04     CMP.W   #0x0, &0x45a
   \   000058   0224         JEQ     ??pwm_29
     51          				LEFT_REVERSE_SPEED = WHEEL_OFF;
   \   00005A   82435A04     MOV.W   #0x0, &0x45a
     52          			}
     53          			if(RIGHT_FORWARD_SPEED != SIXTY_PERCENT_SPEED){
   \                     ??pwm_29:
   \   00005E   B29030755404 CMP.W   #0x7530, &0x454
   \   000064   0324         JEQ     ??pwm_30
     54          				RIGHT_FORWARD_SPEED = SIXTY_PERCENT_SPEED;
   \   000066   B24030755404 MOV.W   #0x7530, &0x454
     55          			}
     56          			if(LEFT_FORWARD_SPEED !=FORTY_PERCENT_SPEED){
   \                     ??pwm_30:
   \   00006C   B290204E5604 CMP.W   #0x4e20, &0x456
   \   000072   DC24         JEQ     ??pwm_1
     57          				LEFT_FORWARD_SPEED = FORTY_PERCENT_SPEED;
   \   000074   B240204E5604 MOV.W   #0x4e20, &0x456
     58          			}
     59          			break;
   \   00007A   1001         RETA
     60          
     61          		case TWO:
     62          			operation_state = OFF;
   \                     ??pwm_13:
   \   00007C   3C401600     MOV.W   #0x16, R12
     63          			break;
   \   000080   1001         RETA
     64          
     65          		case REVERSE:
     66          			if(RIGHT_FORWARD_SPEED != WHEEL_OFF){
   \                     ??pwm_14:
   \   000082   82935404     CMP.W   #0x0, &0x454
   \   000086   0224         JEQ     ??pwm_31
     67          				RIGHT_FORWARD_SPEED = WHEEL_OFF;
   \   000088   82435404     MOV.W   #0x0, &0x454
     68          			}
     69          			if(LEFT_FORWARD_SPEED != WHEEL_OFF){
   \                     ??pwm_31:
   \   00008C   82935604     CMP.W   #0x0, &0x456
   \   000090   0224         JEQ     ??pwm_32
     70          				LEFT_FORWARD_SPEED = WHEEL_OFF;
   \   000092   82435604     MOV.W   #0x0, &0x456
     71          			}
     72          			if(RIGHT_REVERSE_SPEED != THIRTY_PERCENT_SPEED){
   \                     ??pwm_32:
   \   000096   B290983A5804 CMP.W   #0x3a98, &0x458
   \   00009C   0324         JEQ     ??pwm_33
     73          				RIGHT_REVERSE_SPEED = THIRTY_PERCENT_SPEED;
   \   00009E   B240983A5804 MOV.W   #0x3a98, &0x458
     74          			}
     75          			if(LEFT_REVERSE_SPEED != FORTY_PERCENT_SPEED){
   \                     ??pwm_33:
   \   0000A4   B290204E5A04 CMP.W   #0x4e20, &0x45a
   \   0000AA   C024         JEQ     ??pwm_1
     76          				LEFT_REVERSE_SPEED = FORTY_PERCENT_SPEED;
   \   0000AC   B240204E5A04 MOV.W   #0x4e20, &0x45a
     77          			}
     78          			break;
   \   0000B2   1001         RETA
     79          
     80          		case FOUR:
     81          			operation_state = OFF;
   \                     ??pwm_15:
   \   0000B4   3C401600     MOV.W   #0x16, R12
     82          			break;
   \   0000B8   1001         RETA
     83          
     84          		case CLOCKWISE:
     85          			if(RIGHT_FORWARD_SPEED != WHEEL_OFF){
   \                     ??pwm_16:
   \   0000BA   82935404     CMP.W   #0x0, &0x454
   \   0000BE   0224         JEQ     ??pwm_34
     86          				RIGHT_FORWARD_SPEED = WHEEL_OFF;
   \   0000C0   82435404     MOV.W   #0x0, &0x454
     87          			}
     88          			if(LEFT_REVERSE_SPEED != WHEEL_OFF){
   \                     ??pwm_34:
   \   0000C4   82935A04     CMP.W   #0x0, &0x45a
   \   0000C8   0224         JEQ     ??pwm_35
     89          				LEFT_REVERSE_SPEED = WHEEL_OFF;
   \   0000CA   82435A04     MOV.W   #0x0, &0x45a
     90          			}
     91          			if(RIGHT_REVERSE_SPEED != TWENTY_PERCENT_SPEED){
   \                     ??pwm_35:
   \   0000CE   B29010275804 CMP.W   #0x2710, &0x458
   \   0000D4   0324         JEQ     ??pwm_36
     92          				RIGHT_REVERSE_SPEED = TWENTY_PERCENT_SPEED;
   \   0000D6   B24010275804 MOV.W   #0x2710, &0x458
     93          			}
     94          			if(LEFT_FORWARD_SPEED != THIRTY_PERCENT_SPEED){
   \                     ??pwm_36:
   \   0000DC   B290983A5604 CMP.W   #0x3a98, &0x456
   \   0000E2   A424         JEQ     ??pwm_1
     95          				LEFT_FORWARD_SPEED = THIRTY_PERCENT_SPEED;
   \   0000E4   B240983A5604 MOV.W   #0x3a98, &0x456
     96          			}
     97          			break;
   \   0000EA   1001         RETA
     98          
     99          		case SIX:
    100          			operation_state = OFF;
   \                     ??pwm_17:
   \   0000EC   3C401600     MOV.W   #0x16, R12
    101          			break;
   \   0000F0   1001         RETA
    102          
    103          		case COUNTER_CLOCKWISE:
    104          			if(RIGHT_REVERSE_SPEED != WHEEL_OFF){
   \                     ??pwm_18:
   \   0000F2   82935804     CMP.W   #0x0, &0x458
   \   0000F6   0224         JEQ     ??pwm_37
    105          				RIGHT_REVERSE_SPEED = WHEEL_OFF;
   \   0000F8   82435804     MOV.W   #0x0, &0x458
    106          			}
    107          			if(LEFT_FORWARD_SPEED != WHEEL_OFF){
   \                     ??pwm_37:
   \   0000FC   82935604     CMP.W   #0x0, &0x456
   \   000100   0224         JEQ     ??pwm_38
    108          				LEFT_FORWARD_SPEED = WHEEL_OFF;
   \   000102   82435604     MOV.W   #0x0, &0x456
    109          			}
    110          			if(RIGHT_FORWARD_SPEED != THIRTY_PERCENT_SPEED){
   \                     ??pwm_38:
   \   000106   B290983A5404 CMP.W   #0x3a98, &0x454
   \   00010C   0324         JEQ     ??pwm_39
    111          				RIGHT_FORWARD_SPEED = THIRTY_PERCENT_SPEED;
   \   00010E   B240983A5404 MOV.W   #0x3a98, &0x454
    112          			}
    113          			if(LEFT_REVERSE_SPEED != TWENTY_PERCENT_SPEED){
   \                     ??pwm_39:
   \   000114   B29010275A04 CMP.W   #0x2710, &0x45a
   \   00011A   8824         JEQ     ??pwm_1
    114          				LEFT_REVERSE_SPEED = TWENTY_PERCENT_SPEED;
   \   00011C   B24010275A04 MOV.W   #0x2710, &0x45a
    115          			}
    116          			break;
   \   000122   1001         RETA
    117          
    118          		case EIGHT:
    119          			operation_state = OFF;
   \                     ??pwm_19:
   \   000124   3C401600     MOV.W   #0x16, R12
    120          			break;
   \   000128   1001         RETA
    121          
    122          		case CORRECT_LEFT:
    123          			if(RIGHT_REVERSE_SPEED != WHEEL_OFF){
   \                     ??pwm_20:
   \   00012A   82935804     CMP.W   #0x0, &0x458
   \   00012E   0224         JEQ     ??pwm_40
    124          				RIGHT_REVERSE_SPEED = WHEEL_OFF;
   \   000130   82435804     MOV.W   #0x0, &0x458
    125          			}
    126          			if(LEFT_REVERSE_SPEED != WHEEL_OFF){
   \                     ??pwm_40:
   \   000134   82935A04     CMP.W   #0x0, &0x45a
   \   000138   0224         JEQ     ??pwm_41
    127          				LEFT_REVERSE_SPEED = WHEEL_OFF;
   \   00013A   82435A04     MOV.W   #0x0, &0x45a
    128          			}
    129          			if(RIGHT_FORWARD_SPEED != WHEEL_OFF){
   \                     ??pwm_41:
   \   00013E   82935404     CMP.W   #0x0, &0x454
   \   000142   0224         JEQ     ??pwm_42
    130          				RIGHT_FORWARD_SPEED = WHEEL_OFF;
   \   000144   82435404     MOV.W   #0x0, &0x454
    131          			}
    132          			if(LEFT_FORWARD_SPEED != THIRTY_PERCENT_SPEED){
   \                     ??pwm_42:
   \   000148   B290983A5604 CMP.W   #0x3a98, &0x456
   \   00014E   6E24         JEQ     ??pwm_1
    133          				LEFT_FORWARD_SPEED = THIRTY_PERCENT_SPEED;
   \   000150   B240983A5604 MOV.W   #0x3a98, &0x456
    134          			}
    135          			break;
   \   000156   1001         RETA
    136          
    137          		case TEN:
    138          			operation_state = OFF;
   \                     ??pwm_21:
   \   000158   3C401600     MOV.W   #0x16, R12
    139          			break;
   \   00015C   1001         RETA
    140          
    141          		case CORRECT_RIGHT:
    142          			if(RIGHT_REVERSE_SPEED != WHEEL_OFF){
   \                     ??pwm_24:
   \   00015E   82935804     CMP.W   #0x0, &0x458
   \   000162   0224         JEQ     ??pwm_43
    143          				RIGHT_REVERSE_SPEED = WHEEL_OFF;
   \   000164   82435804     MOV.W   #0x0, &0x458
    144          			}
    145          			if(LEFT_REVERSE_SPEED != WHEEL_OFF){
   \                     ??pwm_43:
   \   000168   82935A04     CMP.W   #0x0, &0x45a
   \   00016C   0224         JEQ     ??pwm_44
    146          				LEFT_REVERSE_SPEED = WHEEL_OFF;
   \   00016E   82435A04     MOV.W   #0x0, &0x45a
    147          			}
    148          			if(RIGHT_FORWARD_SPEED != FORTY_PERCENT_SPEED){
   \                     ??pwm_44:
   \   000172   B290204E5404 CMP.W   #0x4e20, &0x454
   \   000178   0324         JEQ     ??pwm_45
    149          				RIGHT_FORWARD_SPEED = FORTY_PERCENT_SPEED;
   \   00017A   B240204E5404 MOV.W   #0x4e20, &0x454
    150          			}
    151          			if(LEFT_FORWARD_SPEED != WHEEL_OFF){
   \                     ??pwm_45:
   \   000180   82935604     CMP.W   #0x0, &0x456
   \   000184   5324         JEQ     ??pwm_1
    152          				LEFT_FORWARD_SPEED = WHEEL_OFF;
   \   000186   82435604     MOV.W   #0x0, &0x456
    153          			}
    154          			break;
   \   00018A   1001         RETA
    155          
    156          		case TWELVE:
    157          			operation_state = OFF;
   \                     ??pwm_22:
   \   00018C   3C401600     MOV.W   #0x16, R12
    158          			break;
   \   000190   1001         RETA
    159          
    160          		case ARC_RIGHT:
    161          			if(RIGHT_REVERSE_SPEED != WHEEL_OFF){
   \                     ??pwm_25:
   \   000192   82935804     CMP.W   #0x0, &0x458
   \   000196   0224         JEQ     ??pwm_46
    162          				RIGHT_REVERSE_SPEED = WHEEL_OFF;
   \   000198   82435804     MOV.W   #0x0, &0x458
    163          			}
    164          			if(LEFT_REVERSE_SPEED != WHEEL_OFF){
   \                     ??pwm_46:
   \   00019C   82935A04     CMP.W   #0x0, &0x45a
   \   0001A0   0224         JEQ     ??pwm_47
    165          				LEFT_REVERSE_SPEED = WHEEL_OFF;
   \   0001A2   82435A04     MOV.W   #0x0, &0x45a
    166          			}
    167          			if(RIGHT_FORWARD_SPEED != THIRTY_PERCENT_SPEED){
   \                     ??pwm_47:
   \   0001A6   B290983A5404 CMP.W   #0x3a98, &0x454
   \   0001AC   0324         JEQ     ??pwm_48
    168          				RIGHT_FORWARD_SPEED = THIRTY_PERCENT_SPEED;
   \   0001AE   B240983A5404 MOV.W   #0x3a98, &0x454
    169          			}
    170          			if(LEFT_FORWARD_SPEED != SIXTY_PERCENT_SPEED){
   \                     ??pwm_48:
   \   0001B4   B29030755604 CMP.W   #0x7530, &0x456
   \   0001BA   3824         JEQ     ??pwm_1
    171          				LEFT_FORWARD_SPEED = SIXTY_PERCENT_SPEED;
   \   0001BC   B24030755604 MOV.W   #0x7530, &0x456
    172          			}
    173          			break;
   \   0001C2   1001         RETA
    174          
    175          		case FOURTEEN:
    176          			operation_state = OFF;
   \                     ??pwm_23:
   \   0001C4   3C401600     MOV.W   #0x16, R12
    177          			break;
   \   0001C8   1001         RETA
    178          
    179          		case ARC_LEFT:
    180          			if(RIGHT_REVERSE_SPEED != WHEEL_OFF){
   \                     ??pwm_26:
   \   0001CA   82935804     CMP.W   #0x0, &0x458
   \   0001CE   0224         JEQ     ??pwm_49
    181          				RIGHT_REVERSE_SPEED = WHEEL_OFF;
   \   0001D0   82435804     MOV.W   #0x0, &0x458
    182          			}
    183          			if(LEFT_REVERSE_SPEED != WHEEL_OFF){
   \                     ??pwm_49:
   \   0001D4   82935A04     CMP.W   #0x0, &0x45a
   \   0001D8   0224         JEQ     ??pwm_50
    184          				LEFT_REVERSE_SPEED = WHEEL_OFF;
   \   0001DA   82435A04     MOV.W   #0x0, &0x45a
    185          			}
    186          			if(RIGHT_FORWARD_SPEED != SEVENTY_PERCENT_SPEED){
   \                     ??pwm_50:
   \   0001DE   B290B8885404 CMP.W   #0x88b8, &0x454
   \   0001E4   0324         JEQ     ??pwm_51
    187          				RIGHT_FORWARD_SPEED = SEVENTY_PERCENT_SPEED;
   \   0001E6   B240B8885404 MOV.W   #0x88b8, &0x454
    188          			}
    189          			if(LEFT_FORWARD_SPEED != THIRTY_PERCENT_SPEED){
   \                     ??pwm_51:
   \   0001EC   B290983A5604 CMP.W   #0x3a98, &0x456
   \   0001F2   1C24         JEQ     ??pwm_1
    190          				LEFT_FORWARD_SPEED = THIRTY_PERCENT_SPEED;
   \   0001F4   B240983A5604 MOV.W   #0x3a98, &0x456
    191          			}
    192          			break;
   \   0001FA   1001         RETA
    193          
    194          		case OFF:
    195          			if(RIGHT_FORWARD_SPEED != WHEEL_OFF){
   \                     ??pwm_27:
   \   0001FC   82935404     CMP.W   #0x0, &0x454
   \   000200   0224         JEQ     ??pwm_52
    196          				RIGHT_FORWARD_SPEED = WHEEL_OFF;
   \   000202   82435404     MOV.W   #0x0, &0x454
    197          			}
    198          			if(LEFT_FORWARD_SPEED != WHEEL_OFF){
   \                     ??pwm_52:
   \   000206   82935604     CMP.W   #0x0, &0x456
   \   00020A   0224         JEQ     ??pwm_53
    199          				LEFT_FORWARD_SPEED = WHEEL_OFF;
   \   00020C   82435604     MOV.W   #0x0, &0x456
    200          			}
    201          			if(RIGHT_REVERSE_SPEED != WHEEL_OFF){
   \                     ??pwm_53:
   \   000210   82935804     CMP.W   #0x0, &0x458
   \   000214   0224         JEQ     ??pwm_54
    202          				RIGHT_REVERSE_SPEED = WHEEL_OFF;
   \   000216   82435804     MOV.W   #0x0, &0x458
    203          			}
    204          			if(LEFT_REVERSE_SPEED != WHEEL_OFF){
   \                     ??pwm_54:
   \   00021A   82935A04     CMP.W   #0x0, &0x45a
   \   00021E   0624         JEQ     ??pwm_1
    205          				LEFT_REVERSE_SPEED = WHEEL_OFF;
   \   000220   82435A04     MOV.W   #0x0, &0x45a
    206          			}
    207          			break;
   \   000224   1001         RETA
    208          
    209          		default:
    210          			reset_op = HIGH;
   \                     ??pwm_11:
   \   000226   F2404800.... MOV.B   #0x48, &reset_op
    211          			break;
    212          	}
    213          }
   \                     ??pwm_1:
   \   00022C   1001         RETA
   \   00022E                REQUIRE _A_TB3CCR3_L
   \   00022E                REQUIRE _A_TB3CCR4_L
   \   00022E                REQUIRE _A_TB3CCR1_L
   \   00022E                REQUIRE _A_TB3CCR2_L

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   pwm


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  _A_TB3CCR1_L
       2  _A_TB3CCR2_L
       2  _A_TB3CCR3_L
       2  _A_TB3CCR4_L
     558  pwm
       2  pwm_count
       2  pwm_delay

 
 558 bytes in segment CODE
   8 bytes in segment DATA16_AN
   4 bytes in segment DATA16_Z
 
 558 bytes of CODE memory
   4 bytes of DATA memory (+ 8 bytes shared)

Errors: none
Warnings: none
