###############################################################################
#
# IAR C/C++ Compiler V7.12.1.987/W32 for MSP430           12/Jun/2020  10:08:08
# Copyright 1996-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Johnathan\OneDrive - North Carolina State
#        University\auto_tank\RTCS\src\ISR_Timers.c
#    Command line  =  
#        -f C:\Users\JOHNAT~1\AppData\Local\Temp\EWBC2.tmp
#        ("C:\Users\Johnathan\OneDrive - North Carolina State
#        University\auto_tank\RTCS\src\ISR_Timers.c" -lC
#        "C:\Users\Johnathan\OneDrive - North Carolina State
#        University\auto_tank\RTCS\Debug\List" -o "C:\Users\Johnathan\OneDrive
#        - North Carolina State University\auto_tank\RTCS\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\430\lib\dlib\dl430xlsfn.h" -I
#        ./\ -I "C:\Users\Johnathan\OneDrive - North Carolina State
#        University\auto_tank\RTCS\include\" -I "C:\Users\Johnathan\OneDrive -
#        North Carolina State University\auto_tank\RTCS\src\" --core=430X
#        --data_model=small -On --multiplier=32 --hw_workaround=CPU40
#        --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\Johnathan\OneDrive - North Carolina State
#        University\auto_tank\RTCS\Debug\List\ISR_Timers.lst
#    Object file   =  
#        C:\Users\Johnathan\OneDrive - North Carolina State
#        University\auto_tank\RTCS\Debug\Obj\ISR_Timers.r43
#
###############################################################################

C:\Users\Johnathan\OneDrive - North Carolina State University\auto_tank\RTCS\src\ISR_Timers.c
      1          //******************************************************************************
      2          // File Name : timerB0_ISR.c
      3          // Description: This file contains the code for timer B0 ISR.
      4          // Author: Johnathan Wilder
      5          // Date: May 2019
      6          // Compiler: Built with IAR Embedded Workbench Version: V4.10A/W32 (7.11.2)
      7          //******************************************************************************
      8          
      9          #include "msp430.h"

   \                                 In  segment DATA16_AN, at 0x21a
   \   union <unnamed> _A_PAIE_L
   \                     _A_PAIE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x21c
   \   union <unnamed> _A_PAIFG_L
   \                     _A_PAIFG_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x23a
   \   union <unnamed> _A_PBIE_L
   \                     _A_PBIE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x23c
   \   union <unnamed> _A_PBIFG_L
   \                     _A_PBIFG_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x242
   \   union <unnamed> _A_PCOUT_L
   \                     _A_PCOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x384
   \   union <unnamed> _A_TB0CCTL1_L
   \                     _A_TB0CCTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x386
   \   union <unnamed> _A_TB0CCTL2_L
   \                     _A_TB0CCTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x392
   \   union <unnamed> _A_TB0CCR0_L
   \                     _A_TB0CCR0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x394
   \   union <unnamed> _A_TB0CCR1_L
   \                     _A_TB0CCR1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x396
   \   union <unnamed> _A_TB0CCR2_L
   \                     _A_TB0CCR2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3ae
   \   union <unnamed> _A_TB0IV_L
   \                     _A_TB0IV_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3c2
   \   union <unnamed> _A_TB1CCTL0_L
   \                     _A_TB1CCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3c4
   \   union <unnamed> _A_TB1CCTL1_L
   \                     _A_TB1CCTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3c6
   \   union <unnamed> _A_TB1CCTL2_L
   \                     _A_TB1CCTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3d2
   \   union <unnamed> _A_TB1CCR0_L
   \                     _A_TB1CCR0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3d4
   \   union <unnamed> _A_TB1CCR1_L
   \                     _A_TB1CCR1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3d6
   \   union <unnamed> _A_TB1CCR2_L
   \                     _A_TB1CCR2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3ee
   \   union <unnamed> _A_TB1IV_L
   \                     _A_TB1IV_L:
   \   000000                DS8 2
     10          #include "Functions.h"
     11          #include "Macros.h"
     12          #include "Ports.h"
     13          
     14          //TimerB0_0
     15          //TimerB0_1

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     16          char SW1_press = LOW;
   \                     SW1_press:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for SW1_press>`

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     17          char SW1_debounce = LOW;
   \                     SW1_debounce:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for SW1_debounce>`

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          unsigned int SW1_debounce_count = ZERO;
   \                     SW1_debounce_count:
   \   000000                DS8 2

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     19          char SW2_press = LOW;
   \                     SW2_press:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for SW2_press>`

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     20          char SW2_debounce = LOW;
   \                     SW2_debounce:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for SW2_debounce>`

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     21          unsigned int SW2_debounce_count = ZERO;
   \                     SW2_debounce_count:
   \   000000                DS8 2
     22          //TimerB0_2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     23          unsigned int timerB0_2_count = ZERO;
   \                     timerB0_2_count:
   \   000000                DS8 2
     24          
     25          //TimerB1_0

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     26          char timerB1_0 = LOW;//Used as a flag to determine if timerB1_0 has been started.
   \                     timerB1_0:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for timerB1_0>`

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     27          unsigned int timerB1_0_case = ZERO;//Used to choose different timing intervals in timerB1_0.
   \                     timerB1_0_case:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     28          unsigned int timerB1_0_count = ZERO;//Used as a counter to exit timerB1_0 ISR.
   \                     timerB1_0_count:
   \   000000                DS8 2
     29          //TimerB1_1

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     30          char timerB1_1 = LOW;//Used as a flag to determine if timerB1_1 has been started.
   \                     timerB1_1:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for timerB1_1>`

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     31          unsigned int timerB1_1_case = ZERO;//Used to choose different timing intervals in timerB1_1.
   \                     timerB1_1_case:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     32          unsigned int timerB1_1_count = ZERO;//Used as a counter to exit timerB1_1 ISR.
   \                     timerB1_1_count:
   \   000000                DS8 2
     33          //TimerB1_2

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     34          char timerB1_2 = LOW;//Used as a flag to determine if timerB1_2 has been started.
   \                     timerB1_2:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for timerB1_2>`

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     35          unsigned int timerB1_2_case = ZERO;//Used to choose different timing intervals in timerB1_2.
   \                     timerB1_2_case:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     36          unsigned int timerB1_2_count = ZERO;//Used as a counter to exit timerB1_2 ISR.
   \                     timerB1_2_count:
   \   000000                DS8 2
     37          
     38          #pragma vector = TIMER0_B0_VECTOR

   \                                 In  segment ISR_CODE, align 2
     39          __interrupt void Timer0_B0_ISR(void){
   \                     Timer0_B0_ISR:
   \   000000   1F15         PUSHM.W #0x2, R15
     40          	if(update_display_count++ > TWOH_MS_COUNT){
   \   000002   1F42....     MOV.W   &update_display_count, R15
   \   000006   0E4F         MOV.W   R15, R14
   \   000008   1E53         ADD.W   #0x1, R14
   \   00000A   824E....     MOV.W   R14, &update_display_count
   \   00000E   3F900300     CMP.W   #0x3, R15
   \   000012   0428         JNC     ??Timer0_B0_ISR_0
     41          		update_display_count = ZERO;
   \   000014   8243....     MOV.W   #0x0, &update_display_count
     42          		update_display = ONE;
   \   000018   D243....     MOV.B   #0x1, &update_display
     43          		//P6OUT != GRN_LED;//Turns the green LED off and on ever 200 milliseconds.
     44          	}
     45          	TB0CCR0 += TB0CCR0_INTERVAL;
   \                     ??Timer0_B0_ISR_0:
   \   00001C   B25050C39203 ADD.W   #0xc350, &0x392
     46          }
   \   000022   1E17         POPM.W  #0x2, R15
   \   000024   0013         RETI
   \   000026                REQUIRE _A_TB0CCR0_L
     47          
     48          #pragma vector = TIMER0_B1_VECTOR

   \                                 In  segment ISR_CODE, align 2
     49          __interrupt void Timer0_B1_ISR(void){
   \                     Timer0_B1_ISR:
   \   000000   1F15         PUSHM.W #0x2, R15
     50          	// TimerB0 1-2 and overflow Interrupt Vector (TBIV) handler
     51          	switch(__even_in_range(TB0IV,FOURTEEN)){
   \   000002   1F42AE03     MOV.W   &0x3ae, R15
   \   000006   E00F         ADDA    R15, PC
   \                     `?<Jumptable for Timer0_B1_ISR>_0`:
   \   000008   4D3C         JMP     ??Timer0_B1_ISR_1
   \   00000A   063C         JMP     ??Timer0_B1_ISR_5
   \   00000C   353C         JMP     ??Timer0_B1_ISR_6
   \   00000E   4A3C         JMP     ??Timer0_B1_ISR_1
   \   000010   493C         JMP     ??Timer0_B1_ISR_1
   \   000012   483C         JMP     ??Timer0_B1_ISR_1
   \   000014   473C         JMP     ??Timer0_B1_ISR_1
   \   000016   463C         JMP     ??Timer0_B1_ISR_1
     52          		case ZERO:
     53          			break; // No interrupt
     54          
     55          		case TWO://TimerB0_1 ISR, switch debounce
     56          			if(SW1_debounce){
   \                     ??Timer0_B1_ISR_5:
   \   000018   C293....     CMP.B   #0x0, &SW1_debounce
   \   00001C   1324         JEQ     ??Timer0_B1_ISR_2
     57          				if(SW1_debounce_count++ > DEBOUNCE_COUNT){
   \   00001E   1F42....     MOV.W   &SW1_debounce_count, R15
   \   000022   0E4F         MOV.W   R15, R14
   \   000024   1E53         ADD.W   #0x1, R14
   \   000026   824E....     MOV.W   R14, &SW1_debounce_count
   \   00002A   3F900600     CMP.W   #0x6, R15
   \   00002E   0A28         JNC     ??Timer0_B1_ISR_2
     58          					P4IFG &= ~SW1; //Disable the port interrupt flag
   \   000030   E2C33D02     BIC.B   #0x2, &0x23d
     59          					P4IE |= SW1;
   \   000034   E2D33B02     BIS.B   #0x2, &0x23b
     60          					TB0CCTL1 &= ~CCIE;
   \   000038   B2C010008403 BIC.W   #0x10, &0x384
     61          					SW1_debounce = LOW;
   \   00003E   F2404C00.... MOV.B   #0x4c, &SW1_debounce
     62          				}
     63          			}
     64          			if(SW2_debounce){
   \                     ??Timer0_B1_ISR_2:
   \   000044   C293....     CMP.B   #0x0, &SW2_debounce
   \   000048   1324         JEQ     ??Timer0_B1_ISR_3
     65          				if(SW2_debounce_count++ > DEBOUNCE_COUNT){
   \   00004A   1F42....     MOV.W   &SW2_debounce_count, R15
   \   00004E   0E4F         MOV.W   R15, R14
   \   000050   1E53         ADD.W   #0x1, R14
   \   000052   824E....     MOV.W   R14, &SW2_debounce_count
   \   000056   3F900600     CMP.W   #0x6, R15
   \   00005A   0A28         JNC     ??Timer0_B1_ISR_3
     66          					P2IFG &= ~SW2;//Disable the port interrupt flag
   \   00005C   F2C21D02     BIC.B   #0x8, &0x21d
     67          					P2IE |= SW2;
   \   000060   F2D21B02     BIS.B   #0x8, &0x21b
     68          					TB0CCTL1 &= ~CCIE;
   \   000064   B2C010008403 BIC.W   #0x10, &0x384
     69          					SW2_debounce = LOW;
   \   00006A   F2404C00.... MOV.B   #0x4c, &SW2_debounce
     70          				}
     71          			}
     72          			TB0CCR1 += TB0CCR1_INTERVAL;//Add Offset to TBCCR1
   \                     ??Timer0_B1_ISR_3:
   \   000070   B25050C39403 ADD.W   #0xc350, &0x394
     73          			break;
   \   000076   163C         JMP     ??Timer0_B1_ISR_1
     74          
     75          		case FOUR://timerB0_2 ISR, switch 2 operations
     76          			if(SW2_press){
   \                     ??Timer0_B1_ISR_6:
   \   000078   C293....     CMP.B   #0x0, &SW2_press
   \   00007C   1024         JEQ     ??Timer0_B1_ISR_4
     77          				if(timerB0_2_count++ > OP_STATE_DELAY_COUNT){
   \   00007E   1F42....     MOV.W   &timerB0_2_count, R15
   \   000082   0E4F         MOV.W   R15, R14
   \   000084   1E53         ADD.W   #0x1, R14
   \   000086   824E....     MOV.W   R14, &timerB0_2_count
   \   00008A   3F900600     CMP.W   #0x6, R15
   \   00008E   0728         JNC     ??Timer0_B1_ISR_4
     78          					TB0CCTL2 &= ~CCIE;
   \   000090   B2C010008603 BIC.W   #0x10, &0x386
     79          					timerB0_2_count = ZERO;
   \   000096   8243....     MOV.W   #0x0, &timerB0_2_count
     80          					operation_state++;
   \   00009A   9253....     ADD.W   #0x1, &operation_state
     81          				}
     82          			}
     83          			TB0CCR2 += TB0CCR2_INTERVAL;
   \                     ??Timer0_B1_ISR_4:
   \   00009E   B25050C39603 ADD.W   #0xc350, &0x396
     84          			break;
     85          
     86          		case FOURTEEN: // overflow
     87          			break;
     88          
     89          		default: break;
     90          	}
     91          }
   \                     ??Timer0_B1_ISR_1:
   \   0000A4   1E17         POPM.W  #0x2, R15
   \   0000A6   0013         RETI
   \   0000A8                REQUIRE _A_PBIFG_L
   \   0000A8                REQUIRE _A_PBIE_L
   \   0000A8                REQUIRE _A_TB0CCTL1_L
   \   0000A8                REQUIRE _A_PAIFG_L
   \   0000A8                REQUIRE _A_PAIE_L
   \   0000A8                REQUIRE _A_TB0CCR1_L
   \   0000A8                REQUIRE _A_TB0CCTL2_L
   \   0000A8                REQUIRE _A_TB0CCR2_L
   \   0000A8                REQUIRE _A_TB0IV_L
     92          
     93          ///////////////////////// Timer B1_0 ISR /////////////////////////
     94          #pragma vector = TIMER1_B0_VECTOR

   \                                 In  segment ISR_CODE, align 2
     95          __interrupt void Timer1_B0_ISR(void){
   \                     Timer1_B0_ISR:
   \   000000   2F15         PUSHM.W #0x3, R15
     96          	if(timerB1_0_count++ > HALF_SEC_COUNT*timerB1_0_case){
   \   000002   1F42....     MOV.W   &timerB1_0_count, R15
   \   000006   0E4F         MOV.W   R15, R14
   \   000008   1E53         ADD.W   #0x1, R14
   \   00000A   824E....     MOV.W   R14, &timerB1_0_count
   \   00000E   1E42....     MOV.W   &timerB1_0_case, R14
   \   000012   0D4E         MOV.W   R14, R13
   \   000014   5E06         RLAM.W  #0x2, R14
   \   000016   0E5D         ADD.W   R13, R14
   \   000018   0E9F         CMP.W   R15, R14
   \   00001A   292C         JC      ??Timer1_B0_ISR_4
     97          		switch(operation){
   \   00001C   1F42....     MOV.W   &operation, R15
   \   000020   2F83         SUB.W   #0x2, R15
   \   000022   2024         JEQ     ??Timer1_B0_ISR_3
   \   000024   1F83         SUB.W   #0x1, R15
   \   000026   1924         JEQ     ??Timer1_B0_ISR_5
   \   000028   1F83         SUB.W   #0x1, R15
   \   00002A   0F24         JEQ     ??Timer1_B0_ISR_6
   \   00002C   1F83         SUB.W   #0x1, R15
   \   00002E   0424         JEQ     ??Timer1_B0_ISR_7
   \   000030   1F83         SUB.W   #0x1, R15
   \   000032   1824         JEQ     ??Timer1_B0_ISR_3
   \   000034   1F83         SUB.W   #0x1, R15
   \   000036   163C         JMP     ??Timer1_B0_ISR_3
     98          			case SEVEN:
     99          				break;
    100          			case SIX://Callibration.
    101          				break;
    102          			case FIVE://Line Follow.
    103          				operation_state++;
   \                     ??Timer1_B0_ISR_7:
   \   000038   9253....     ADD.W   #0x1, &operation_state
    104          				P5OUT |= IR_LED;
   \   00003C   F2D010004202 BIS.B   #0x10, &0x242
    105          				TB1CCTL0 &= ~CCIE;
   \   000042   B2C01000C203 BIC.W   #0x10, &0x3c2
    106          				break;
   \   000048   0D3C         JMP     ??Timer1_B0_ISR_3
    107          			case FOUR:// SERIAL_COM.
    108          				IOT_Tx_rdy = LOW;
   \                     ??Timer1_B0_ISR_6:
   \   00004A   F2404C00.... MOV.B   #0x4c, &IOT_Tx_rdy
    109          				IOT_Rx_index = ZERO;
   \   000050   8243....     MOV.W   #0x0, &IOT_Rx_index
    110          				operation_state++;
   \   000054   9253....     ADD.W   #0x1, &operation_state
    111          				break;
   \   000058   053C         JMP     ??Timer1_B0_ISR_3
    112          			case THREE://WIFI
    113          				TB1CCTL0 &= ~CCIE;
   \                     ??Timer1_B0_ISR_5:
   \   00005A   B2C01000C203 BIC.W   #0x10, &0x3c2
    114          				operation_state = ONE;
   \   000060   9243....     MOV.W   #0x1, &operation_state
    115          				break;
    116          			case TWO:
    117          				break;
    118          			default: break;
    119          		}
    120          		timerB1_0 = LOW;
   \                     ??Timer1_B0_ISR_3:
   \   000064   F2404C00.... MOV.B   #0x4c, &timerB1_0
    121          		timerB1_0_count = ZERO;
   \   00006A   8243....     MOV.W   #0x0, &timerB1_0_count
    122          	}
    123          	TB1CCR0 += TB1CCR0_INTERVAL;
   \                     ??Timer1_B0_ISR_4:
   \   00006E   B25050C3D203 ADD.W   #0xc350, &0x3d2
    124          }
   \   000074   2D17         POPM.W  #0x3, R15
   \   000076   0013         RETI
   \   000078                REQUIRE _A_PCOUT_L
   \   000078                REQUIRE _A_TB1CCTL0_L
   \   000078                REQUIRE _A_TB1CCR0_L
    125          
    126          ///////////////////////// Timer B1_1, B1_2, B1_overflow ISR /////////////////////////
    127          #pragma vector = TIMER1_B1_VECTOR

   \                                 In  segment ISR_CODE, align 2
    128          __interrupt void Timer1_B1_ISR(void){
   \                     Timer1_B1_ISR:
   \   000000   3F15         PUSHM.W #0x4, R15
    129          	switch(__even_in_range(TB1IV,FOURTEEN)){
   \   000002   1F42EE03     MOV.W   &0x3ee, R15
   \   000006   E00F         ADDA    R15, PC
   \                     `?<Jumptable for Timer1_B1_ISR>_0`:
   \   000008   1D3C         JMP     ??Timer1_B1_ISR_1
   \   00000A   063C         JMP     ??Timer1_B1_ISR_3
   \   00000C   133C         JMP     ??Timer1_B1_ISR_4
   \   00000E   1A3C         JMP     ??Timer1_B1_ISR_1
   \   000010   193C         JMP     ??Timer1_B1_ISR_1
   \   000012   183C         JMP     ??Timer1_B1_ISR_1
   \   000014   173C         JMP     ??Timer1_B1_ISR_1
   \   000016   163C         JMP     ??Timer1_B1_ISR_1
    130          		case ZERO:
    131          			break;
    132          		case TWO://PWM Delay
    133          				timerB1_1_count++;
   \                     ??Timer1_B1_ISR_3:
   \   000018   9253....     ADD.W   #0x1, &timerB1_1_count
    134          				HEXtoBCD_timer(timerB1_1_count);
   \   00001C   1C42....     MOV.W   &timerB1_1_count, R12
   \   000020   ........     CALLA   #HEXtoBCD_timer
    135          				displays(operation);
   \   000024   1C42....     MOV.W   &operation, R12
   \   000028   ........     CALLA   #displays
    136          			TB1CCR1 += TB1CCR1_INTERVAL;
   \   00002C   B25050C3D403 ADD.W   #0xc350, &0x3d4
    137          			break;
   \   000032   083C         JMP     ??Timer1_B1_ISR_1
    138          		case FOUR:
    139          			switch(timerB1_2_case){
   \                     ??Timer1_B1_ISR_4:
   \   000034   1F42....     MOV.W   &timerB1_2_case, R15
   \   000038   0F83         SUB.W   #0x0, R15
   \   00003A   0124         JEQ     ??Timer1_B1_ISR_2
   \   00003C   1F83         SUB.W   #0x1, R15
    140          				case ZERO://Circle Time
    141          					break;
    142          				case ONE://Back Mid
    143          					break;
    144          			}
    145          			TB1CCR2 += TB1CCR2_INTERVAL;
   \                     ??Timer1_B1_ISR_2:
   \   00003E   B25050C3D603 ADD.W   #0xc350, &0x3d6
    146          			break;
    147          
    148          		case FOURTEEN:
    149          			break;
    150          	}
    151          }
   \                     ??Timer1_B1_ISR_1:
   \   000044   3C17         POPM.W  #0x4, R15
   \   000046   0013         RETI
   \   000048                REQUIRE _A_TB1CCR1_L
   \   000048                REQUIRE _A_TB1CCR2_L
   \   000048                REQUIRE _A_TB1IV_L
    152          

   \                                 In  segment CODE, align 2
    153          void start_timerB1_0(unsigned int timerB1_0_value){
   \                     start_timerB1_0:
    154          	timerB1_0 = HIGH;
   \   000000   F2404800.... MOV.B   #0x48, &timerB1_0
    155          	timerB1_0_case = timerB1_0_value;
   \   000006   824C....     MOV.W   R12, &timerB1_0_case
    156          	timerB1_0_count = ZERO;
   \   00000A   8243....     MOV.W   #0x0, &timerB1_0_count
    157          	TB1CCTL0 |= CCIE;
   \   00000E   B2D01000C203 BIS.W   #0x10, &0x3c2
    158          }
   \   000014   1001         RETA
   \   000016                REQUIRE _A_TB1CCTL0_L
    159          

   \                                 In  segment CODE, align 2
    160          void start_timerB1_1(unsigned int timerB1_1_value){
   \                     start_timerB1_1:
    161          	timerB1_1 = HIGH;
   \   000000   F2404800.... MOV.B   #0x48, &timerB1_1
    162          	timerB1_1_count = ZERO;
   \   000006   8243....     MOV.W   #0x0, &timerB1_1_count
    163          	timerB1_1_case = timerB1_1_value;
   \   00000A   824C....     MOV.W   R12, &timerB1_1_case
    164          	TB1CCTL1 |= CCIE;
   \   00000E   B2D01000C403 BIS.W   #0x10, &0x3c4
    165          }
   \   000014   1001         RETA
   \   000016                REQUIRE _A_TB1CCTL1_L
    166          

   \                                 In  segment CODE, align 2
    167          void start_timerB1_2(unsigned int timerB1_2_value){
   \                     start_timerB1_2:
    168          	timerB1_2 = HIGH;
   \   000000   F2404800.... MOV.B   #0x48, &timerB1_2
    169          	timerB1_2_case = timerB1_2_value;
   \   000006   824C....     MOV.W   R12, &timerB1_2_case
    170          	timerB1_2_count = ZERO;
   \   00000A   8243....     MOV.W   #0x0, &timerB1_2_count
    171          	TB1CCTL2 |= CCIE;
   \   00000E   B2D01000C603 BIS.W   #0x10, &0x3c6
    172          }
   \   000014   1001         RETA
   \   000016                REQUIRE _A_TB1CCTL2_L

   \                                 In  segment INTVEC, offset 0x50, root
   \                     `??Timer1_B1_ISR::??INTVEC 80`:
   \   000050   ....         DC16    Timer1_B1_ISR

   \                                 In  segment INTVEC, offset 0x52, root
   \                     `??Timer1_B0_ISR::??INTVEC 82`:
   \   000052   ....         DC16    Timer1_B0_ISR

   \                                 In  segment INTVEC, offset 0x54, root
   \                     `??Timer0_B1_ISR::??INTVEC 84`:
   \   000054   ....         DC16    Timer0_B1_ISR

   \                                 In  segment INTVEC, offset 0x56, root
   \                     `??Timer0_B0_ISR::??INTVEC 86`:
   \   000056   ....         DC16    Timer0_B0_ISR

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for SW1_press>`:
   \   000000   4C           DC8 76

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for SW1_debounce>`:
   \   000000   4C           DC8 76

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for SW2_press>`:
   \   000000   4C           DC8 76

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for SW2_debounce>`:
   \   000000   4C           DC8 76

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for timerB1_0>`:
   \   000000   4C           DC8 76

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for timerB1_1>`:
   \   000000   4C           DC8 76

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for timerB1_2>`:
   \   000000   4C           DC8 76

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      8   Timer0_B0_ISR
      8   Timer0_B1_ISR
     10   Timer1_B0_ISR
     12   Timer1_B1_ISR
       12   -> HEXtoBCD_timer
       12   -> displays
      4   start_timerB1_0
      4   start_timerB1_1
      4   start_timerB1_2


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for SW1_debounce>
       1  ?<Initializer for SW1_press>
       1  ?<Initializer for SW2_debounce>
       1  ?<Initializer for SW2_press>
       1  ?<Initializer for timerB1_0>
       1  ?<Initializer for timerB1_1>
       1  ?<Initializer for timerB1_2>
       1  SW1_debounce
       2  SW1_debounce_count
       1  SW1_press
       1  SW2_debounce
       2  SW2_debounce_count
       1  SW2_press
      38  Timer0_B0_ISR
       2  Timer0_B0_ISR::??INTVEC 86
     168  Timer0_B1_ISR
       2  Timer0_B1_ISR::??INTVEC 84
     120  Timer1_B0_ISR
       2  Timer1_B0_ISR::??INTVEC 82
      72  Timer1_B1_ISR
       2  Timer1_B1_ISR::??INTVEC 80
       2  _A_PAIE_L
       2  _A_PAIFG_L
       2  _A_PBIE_L
       2  _A_PBIFG_L
       2  _A_PCOUT_L
       2  _A_TB0CCR0_L
       2  _A_TB0CCR1_L
       2  _A_TB0CCR2_L
       2  _A_TB0CCTL1_L
       2  _A_TB0CCTL2_L
       2  _A_TB0IV_L
       2  _A_TB1CCR0_L
       2  _A_TB1CCR1_L
       2  _A_TB1CCR2_L
       2  _A_TB1CCTL0_L
       2  _A_TB1CCTL1_L
       2  _A_TB1CCTL2_L
       2  _A_TB1IV_L
      22  start_timerB1_0
      22  start_timerB1_1
      22  start_timerB1_2
       2  timerB0_2_count
       1  timerB1_0
       2  timerB1_0_case
       2  timerB1_0_count
       1  timerB1_1
       2  timerB1_1_case
       2  timerB1_1_count
       1  timerB1_2
       2  timerB1_2_case
       2  timerB1_2_count

 
  66 bytes in segment CODE
  36 bytes in segment DATA16_AN
   7 bytes in segment DATA16_I
   7 bytes in segment DATA16_ID
  18 bytes in segment DATA16_Z
   8 bytes in segment INTVEC
 398 bytes in segment ISR_CODE
 
 464 bytes of CODE  memory
   7 bytes of CONST memory (+  8 bytes shared)
  25 bytes of DATA  memory (+ 36 bytes shared)

Errors: none
Warnings: none
