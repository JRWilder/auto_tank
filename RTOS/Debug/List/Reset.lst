###############################################################################
#
# IAR C/C++ Compiler V7.12.1.987/W32 for MSP430           16/Jun/2020  19:26:11
# Copyright 1996-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Johnathan\OneDrive - North Carolina State
#        University\auto_tank\RTCS\src\Reset.c
#    Command line  =  
#        -f C:\Users\JOHNAT~1\AppData\Local\Temp\EW7DCF.tmp
#        ("C:\Users\Johnathan\OneDrive - North Carolina State
#        University\auto_tank\RTCS\src\Reset.c" -lC
#        "C:\Users\Johnathan\OneDrive - North Carolina State
#        University\auto_tank\RTCS\Debug\List" -o "C:\Users\Johnathan\OneDrive
#        - North Carolina State University\auto_tank\RTCS\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\430\lib\dlib\dl430xlsfn.h" -I
#        ./\ -I "C:\Users\Johnathan\OneDrive - North Carolina State
#        University\auto_tank\RTCS\include\" -I "C:\Users\Johnathan\OneDrive -
#        North Carolina State University\auto_tank\RTCS\src\" --core=430X
#        --data_model=small -On --multiplier=32 --hw_workaround=CPU40
#        --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\Johnathan\OneDrive - North Carolina State
#        University\auto_tank\RTCS\Debug\List\Reset.lst
#    Object file   =  
#        C:\Users\Johnathan\OneDrive - North Carolina State
#        University\auto_tank\RTCS\Debug\Obj\Reset.r43
#
###############################################################################

C:\Users\Johnathan\OneDrive - North Carolina State University\auto_tank\RTCS\src\Reset.c
      1          //******************************************************************************
      2          // File Name : Reset.c
      3          // Description: This file contains the code to clear all flags, disable timers,
      4          // and reset operation specific variables
      5          // Author: Johnathan Wilder
      6          // Date: January 2019
      7          // Compiler: Built with IAR Embedded Workbench Version: V4.10A/W32 (7.11.2)
      8          //******************************************************************************
      9          
     10          #include "msp430.h"

   \                                 In  segment DATA16_AN, at 0x242
   \   union <unnamed> _A_PCOUT_L
   \                     _A_PCOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3c2
   \   union <unnamed> _A_TB1CCTL0_L
   \                     _A_TB1CCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3c4
   \   union <unnamed> _A_TB1CCTL1_L
   \                     _A_TB1CCTL1_L:
   \   000000                DS8 2
     11          #include "Functions.h"
     12          #include "Macros.h"
     13          #include "Ports.h"
     14          

   \                                 In  segment CODE, align 2
     15          void reset(unsigned int operation){
   \                     reset:
   \   000000   0A12         PUSH.W  R10
   \   000002   0A4C         MOV.W   R12, R10
     16          	pwm(OFF);
   \   000004   3C401600     MOV.W   #0x16, R12
   \   000008   ........     CALLA   #pwm
     17          	run_operation = LOW;
   \   00000C   F2404C00.... MOV.B   #0x4c, &run_operation
     18          	run_display = LOW;
   \   000012   F2404C00.... MOV.B   #0x4c, &run_display
     19          	operation_state = ZERO;
   \   000018   8243....     MOV.W   #0x0, &operation_state
     20          	old_operation_state = ZERO;
   \   00001C   8243....     MOV.W   #0x0, &old_operation_state
     21          	SW1_press = LOW;
   \   000020   F2404C00.... MOV.B   #0x4c, &SW1_press
     22          	SW2_press = LOW;
   \   000026   F2404C00.... MOV.B   #0x4c, &SW2_press
     23          	TB1CCTL0 &= ~CCIE;
   \   00002C   B2C01000C203 BIC.W   #0x10, &0x3c2
     24          	TB1CCTL1 &= ~CCIE;
   \   000032   B2C01000C403 BIC.W   #0x10, &0x3c4
     25          	switch(operation){
   \   000038   0F4A         MOV.W   R10, R15
   \   00003A   2F83         SUB.W   #0x2, R15
   \   00003C   6224         JEQ     ??reset_6
   \   00003E   1F83         SUB.W   #0x1, R15
   \   000040   5B24         JEQ     ??reset_7
   \   000042   1F83         SUB.W   #0x1, R15
   \   000044   0E24         JEQ     ??reset_8
   \   000046   1F83         SUB.W   #0x1, R15
   \   000048   0824         JEQ     ??reset_9
   \   00004A   1F83         SUB.W   #0x1, R15
   \   00004C   0224         JEQ     ??reset_10
   \   00004E   1F83         SUB.W   #0x1, R15
   \   000050   583C         JMP     ??reset_6
     26          		case SEVEN://Normal
     27          			break;
     28          		case SIX://Line Detect
     29          			P5OUT &= ~IR_LED;
   \                     ??reset_10:
   \   000052   F2C010004202 BIC.B   #0x10, &0x242
     30          			break;
   \   000058   543C         JMP     ??reset_6
     31          		case FIVE://Line Follow
     32          			P5OUT &= ~IR_LED;
   \                     ??reset_9:
   \   00005A   F2C010004202 BIC.B   #0x10, &0x242
     33          			break;
   \   000060   503C         JMP     ??reset_6
     34          		case FOUR://Serial Communications
     35          			//UCA0
     36          			for(unsigned int i=ZERO; i<SIXTY_FOUR; i++){
   \                     ??reset_8:
   \   000062   0F43         MOV.W   #0x0, R15
   \                     ??reset_0:
   \   000064   3F90C000     CMP.W   #0xc0, R15
   \   000068   042C         JC      ??reset_11
     37          				IOT_Rx[i] = ZERO;
   \   00006A   CF43....     MOV.B   #0x0, IOT_Rx(R15)
     38          			}
   \   00006E   1F53         ADD.W   #0x1, R15
   \   000070   F93F         JMP     ??reset_0
     39          			for(unsigned int i=ZERO; i<THIRTY_TWO; i++){
   \                     ??reset_11:
   \   000072   0F43         MOV.W   #0x0, R15
   \                     ??reset_1:
   \   000074   3F901A00     CMP.W   #0x1a, R15
   \   000078   042C         JC      ??reset_12
     40          				IOT_Tx[i] = ZERO;
   \   00007A   CF43....     MOV.B   #0x0, IOT_Tx(R15)
     41          			}
   \   00007E   1F53         ADD.W   #0x1, R15
   \   000080   F93F         JMP     ??reset_1
     42          			for(unsigned int i=ZERO; i<THIRTY_TWO; i++){
   \                     ??reset_12:
   \   000082   0F43         MOV.W   #0x0, R15
   \                     ??reset_2:
   \   000084   3F901A00     CMP.W   #0x1a, R15
   \   000088   042C         JC      ??reset_13
     43          				command[i] = ZERO;
   \   00008A   CF43....     MOV.B   #0x0, command(R15)
     44          			}
   \   00008E   1F53         ADD.W   #0x1, R15
   \   000090   F93F         JMP     ??reset_2
     45          			IOT_Rx_index = ZERO;
   \                     ??reset_13:
   \   000092   8243....     MOV.W   #0x0, &IOT_Rx_index
     46          			IOT_Rx_rdy = LOW;
   \   000096   F2404C00.... MOV.B   #0x4c, &IOT_Rx_rdy
     47          			IOT_Tx_index = ZERO;
   \   00009C   8243....     MOV.W   #0x0, &IOT_Tx_index
     48          			IOT_Tx_rdy = LOW;
   \   0000A0   F2404C00.... MOV.B   #0x4c, &IOT_Tx_rdy
     49          			SSID_index = ZERO;
   \   0000A6   8243....     MOV.W   #0x0, &SSID_index
     50          			SSID_rdy = LOW;
   \   0000AA   F2404C00.... MOV.B   #0x4c, &SSID_rdy
     51          			IP_ADDR_index = ZERO;
   \   0000B0   8243....     MOV.W   #0x0, &IP_ADDR_index
     52          			IP_ADDR_rdy = LOW;
   \   0000B4   F2404C00.... MOV.B   #0x4c, &IP_ADDR_rdy
     53          			command_index = ZERO;
   \   0000BA   8243....     MOV.W   #0x0, &command_index
     54          			command_rdy = LOW;
   \   0000BE   F2404C00.... MOV.B   #0x4c, &command_rdy
     55          			diss_index = ZERO;
   \   0000C4   8243....     MOV.W   #0x0, &diss_index
     56          			diss_event_rdy = LOW;
   \   0000C8   F2404C00.... MOV.B   #0x4c, &diss_event_rdy
     57          
     58          			//UCA1
     59          			for(unsigned int i=ZERO; i<THIRTY_TWO; i++){
   \   0000CE   0F43         MOV.W   #0x0, R15
   \                     ??reset_3:
   \   0000D0   3F901A00     CMP.W   #0x1a, R15
   \   0000D4   062C         JC      ??reset_14
     60          				USB_Rx[i] = ZERO; // USB Rx Buffer
   \   0000D6   CF43....     MOV.B   #0x0, USB_Rx(R15)
     61          				USB_Tx[i] = ZERO;
   \   0000DA   CF43....     MOV.B   #0x0, USB_Tx(R15)
     62          			}
   \   0000DE   1F53         ADD.W   #0x1, R15
   \   0000E0   F73F         JMP     ??reset_3
     63          			USB_Rx_index = ZERO;
   \                     ??reset_14:
   \   0000E2   8243....     MOV.W   #0x0, &USB_Rx_index
     64          			USB_Tx_index = ZERO;
   \   0000E6   8243....     MOV.W   #0x0, &USB_Tx_index
     65          			USB_Rx_rdy = LOW;
   \   0000EA   F2404C00.... MOV.B   #0x4c, &USB_Rx_rdy
     66          			USB_Tx_rdy = LOW;
   \   0000F0   F2404C00.... MOV.B   #0x4c, &USB_Tx_rdy
     67          			break;
   \   0000F6   053C         JMP     ??reset_6
     68          		case THREE://WIFI
     69          			station = ZERO;
   \                     ??reset_7:
   \   0000F8   8243....     MOV.W   #0x0, &station
     70          			TB1CCTL1 &= ~CCIE;
   \   0000FC   B2C01000C403 BIC.W   #0x10, &0x3c4
     71          			break;
     72          		case TWO://Pulse Width Modulation (PWM)
     73          			break;
     74          		default: break;
     75          	}
     76          	reset_op = LOW;
   \                     ??reset_6:
   \   000102   F2404C00.... MOV.B   #0x4c, &reset_op
     77          	operation = ZERO;
   \   000108   0A43         MOV.W   #0x0, R10
     78          }
   \   00010A   3A41         POP.W   R10
   \   00010C   1001         RETA
   \   00010E                REQUIRE _A_TB1CCTL0_L
   \   00010E                REQUIRE _A_TB1CCTL1_L
   \   00010E                REQUIRE _A_PCOUT_L

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      6   reset
        6   -> pwm


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  _A_PCOUT_L
       2  _A_TB1CCTL0_L
       2  _A_TB1CCTL1_L
     270  reset

 
 270 bytes in segment CODE
   6 bytes in segment DATA16_AN
 
 270 bytes of CODE memory
   0 bytes of DATA memory (+ 6 bytes shared)

Errors: none
Warnings: none
