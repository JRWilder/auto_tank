###############################################################################
#
# IAR C/C++ Compiler V7.12.1.987/W32 for MSP430           16/Jun/2020  19:26:10
# Copyright 1996-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Johnathan\OneDrive - North Carolina State
#        University\auto_tank\RTCS\src\Displays.c
#    Command line  =  
#        -f C:\Users\JOHNAT~1\AppData\Local\Temp\EW787F.tmp
#        ("C:\Users\Johnathan\OneDrive - North Carolina State
#        University\auto_tank\RTCS\src\Displays.c" -lC
#        "C:\Users\Johnathan\OneDrive - North Carolina State
#        University\auto_tank\RTCS\Debug\List" -o "C:\Users\Johnathan\OneDrive
#        - North Carolina State University\auto_tank\RTCS\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\430\lib\dlib\dl430xlsfn.h" -I
#        ./\ -I "C:\Users\Johnathan\OneDrive - North Carolina State
#        University\auto_tank\RTCS\include\" -I "C:\Users\Johnathan\OneDrive -
#        North Carolina State University\auto_tank\RTCS\src\" --core=430X
#        --data_model=small -On --multiplier=32 --hw_workaround=CPU40
#        --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\Johnathan\OneDrive - North Carolina State
#        University\auto_tank\RTCS\Debug\List\Displays.lst
#    Object file   =  
#        C:\Users\Johnathan\OneDrive - North Carolina State
#        University\auto_tank\RTCS\Debug\Obj\Displays.r43
#
###############################################################################

C:\Users\Johnathan\OneDrive - North Carolina State University\auto_tank\RTCS\src\Displays.c
      1          //******************************************************************************
      2          // File Name: Display.c
      3          // Description: This file contains all of the code to update the LCD display
      4          // based on the operation and operation state.
      5          // Author: Johnathan Wilder
      6          // Date: May 2019
      7          // Compiler: Built with IAR Embedded Workbench Version: V4.10A/W32 (7.11.2)
      8          //******************************************************************************
      9          
     10          #include "msp430.h"
     11          #include "Functions.h"
     12          #include "Macros.h"
     13          #include <string.h>
     14          

   \                                 In  segment CODE, align 2
     15          void displays(unsigned int display_mode){
   \                     displays:
   \   000000   0A12         PUSH.W  R10
   \   000002   0A4C         MOV.W   R12, R10
     16          	switch(display_mode){
   \   000004   0F4A         MOV.W   R10, R15
   \   000006   2F83         SUB.W   #0x2, R15
   \   000008   6425         JEQ     ??displays_17
   \   00000A   1F83         SUB.W   #0x1, R15
   \   00000C   E024         JEQ     ??displays_18
   \   00000E   1F83         SUB.W   #0x1, R15
   \   000010   AA24         JEQ     ??displays_19
   \   000012   1F83         SUB.W   #0x1, R15
   \   000014   7E24         JEQ     ??displays_20
   \   000016   1F83         SUB.W   #0x1, R15
   \   000018   1F24         JEQ     ??displays_21
   \   00001A   1F83         SUB.W   #0x1, R15
   \   00001C   AB21         JNE     ??displays_16
     17          		case SEVEN://Normal
     18          			string_copy(ZERO,  "  HELLO!  ");
   \   00001E   3D40....     MOV.W   #`?<Constant "  HELLO!  ">`, R13
   \   000022   0C43         MOV.W   #0x0, R12
   \   000024   ........     CALLA   #string_copy
     19          			string_copy(ONE,   "JOHNATHAN!");
   \   000028   3D40....     MOV.W   #`?<Constant "JOHNATHAN!">`, R13
   \   00002C   1C43         MOV.W   #0x1, R12
   \   00002E   ........     CALLA   #string_copy
     20          			string_copy(TWO,   " I AM BOB ");
   \   000032   3D40....     MOV.W   #`?<Constant " I AM BOB ">`, R13
   \   000036   2C43         MOV.W   #0x2, R12
   \   000038   ........     CALLA   #string_copy
     21          			string_copy(THREE, " JRWILDE2 ");
   \   00003C   3D40....     MOV.W   #`?<Constant " JRWILDE2 ">`, R13
   \   000040   3C400300     MOV.W   #0x3, R12
   \   000044   ........     CALLA   #string_copy
     22          			if(operation != SEVEN){
   \   000048   B2900700.... CMP.W   #0x7, &operation
   \   00004E   9225         JEQ     ??displays_16
     23          				operation = SEVEN;
   \   000050   B2400700.... MOV.W   #0x7, &operation
     24          			}
     25          			break;
   \   000056   8E3D         JMP     ??displays_16
     26          		case SIX://Calibration
     27          			if(run_display == HIGH){
   \                     ??displays_21:
   \   000058   F2904800.... CMP.B   #0x48, &run_display
   \   00005E   4320         JNE     ??displays_22
     28          				switch(operation_state){
   \   000060   1F42....     MOV.W   &operation_state, R15
   \   000064   0F83         SUB.W   #0x0, R15
   \   000066   0924         JEQ     ??displays_23
   \   000068   1F83         SUB.W   #0x1, R15
   \   00006A   0D24         JEQ     ??displays_24
   \   00006C   1F83         SUB.W   #0x1, R15
   \   00006E   1624         JEQ     ??displays_25
   \   000070   1F83         SUB.W   #0x1, R15
   \   000072   1A24         JEQ     ??displays_26
   \   000074   1F83         SUB.W   #0x1, R15
   \   000076   1E24         JEQ     ??displays_27
   \   000078   223C         JMP     ??displays_0
     29          					case ZERO://Setup
     30          						string_copy(ONE,  "EMITTR_OFF");
   \                     ??displays_23:
   \   00007A   3D40....     MOV.W   #`?<Constant "EMITTR_OFF">`, R13
   \   00007E   1C43         MOV.W   #0x1, R12
   \   000080   ........     CALLA   #string_copy
     31          						break;
   \   000084   1C3C         JMP     ??displays_0
     32          					case ONE://Emitter_On
     33          						string_copy(ONE,  "EMITTR_ON ");
   \                     ??displays_24:
   \   000086   3D40....     MOV.W   #`?<Constant "EMITTR_ON ">`, R13
   \   00008A   1C43         MOV.W   #0x1, R12
   \   00008C   ........     CALLA   #string_copy
     34          						string_copy(TWO,  "LEFT RIGHT");
   \   000090   3D40....     MOV.W   #`?<Constant "LEFT RIGHT">`, R13
   \   000094   2C43         MOV.W   #0x2, R12
   \   000096   ........     CALLA   #string_copy
     35          						break;
   \   00009A   113C         JMP     ??displays_0
     36          					case TWO://White Calibration
     37          						string_copy(ONE,  "WHITE_CAL ");
   \                     ??displays_25:
   \   00009C   3D40....     MOV.W   #`?<Constant "WHITE_CAL ">`, R13
   \   0000A0   1C43         MOV.W   #0x1, R12
   \   0000A2   ........     CALLA   #string_copy
     38          						break;
   \   0000A6   0B3C         JMP     ??displays_0
     39          					case THREE://Black Calibration
     40          						string_copy(ONE,  "BLACK_CAL ");
   \                     ??displays_26:
   \   0000A8   3D40....     MOV.W   #`?<Constant "BLACK_CAL ">`, R13
   \   0000AC   1C43         MOV.W   #0x1, R12
   \   0000AE   ........     CALLA   #string_copy
     41          						break;
   \   0000B2   053C         JMP     ??displays_0
     42          					case FOUR://Emitter Off
     43          						string_copy(ONE,  "EMITTR_OFF");
   \                     ??displays_27:
   \   0000B4   3D40....     MOV.W   #`?<Constant "EMITTR_OFF">`, R13
   \   0000B8   1C43         MOV.W   #0x1, R12
   \   0000BA   ........     CALLA   #string_copy
     44          						break;
     45          					default: break;
     46          				}
     47          				if(operation != SIX){
   \                     ??displays_0:
   \   0000BE   B2900600.... CMP.W   #0x6, &operation
   \   0000C4   0324         JEQ     ??displays_28
     48          					operation = SIX;
   \   0000C6   B2400600.... MOV.W   #0x6, &operation
     49          				}
     50          				HEXtoBCD(v_detect_left, v_detect_right);
                 				^
Warning[Pa082]: undefined behavior: the order of volatile accesses is undefined
          in this statement
   \                     ??displays_28:
   \   0000CC   1D42....     MOV.W   &v_detect_right, R13
   \   0000D0   1C42....     MOV.W   &v_detect_left, R12
   \   0000D4   ........     CALLA   #HEXtoBCD
     51          				string_copy(THREE, adc_char);
   \   0000D8   3D40....     MOV.W   #adc_char, R13
   \   0000DC   3C400300     MOV.W   #0x3, R12
   \   0000E0   ........     CALLA   #string_copy
   \   0000E4   473D         JMP     ??displays_16
     52          			}else{
     53          				string_copy(ZERO,   "LINE_DETEC");
   \                     ??displays_22:
   \   0000E6   3D40....     MOV.W   #`?<Constant "LINE_DETEC">`, R13
   \   0000EA   0C43         MOV.W   #0x0, R12
   \   0000EC   ........     CALLA   #string_copy
     54          				string_copy(ONE,    "          ");
   \   0000F0   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   0000F4   1C43         MOV.W   #0x1, R12
   \   0000F6   ........     CALLA   #string_copy
     55          				string_copy(TWO,    "          ");
   \   0000FA   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   0000FE   2C43         MOV.W   #0x2, R12
   \   000100   ........     CALLA   #string_copy
     56          				string_copy(THREE,  "          ");
   \   000104   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000108   3C400300     MOV.W   #0x3, R12
   \   00010C   ........     CALLA   #string_copy
     57          			}
     58          			break;
   \   000110   313D         JMP     ??displays_16
     59          		case FIVE://Line Follow
     60          			if(run_display == HIGH){
   \                     ??displays_20:
   \   000112   F2904800.... CMP.B   #0x48, &run_display
   \   000118   1020         JNE     ??displays_29
     61          				switch(operation_state){
   \   00011A   8293....     CMP.W   #0x0, &operation_state
   \   00011E   0520         JNE     ??displays_1
     62          					case ZERO://Setup
     63          						string_copy(ZERO, "LINE_FOLLW");
   \   000120   3D40....     MOV.W   #`?<Constant "LINE_FOLLW">`, R13
   \   000124   0C43         MOV.W   #0x0, R12
   \   000126   ........     CALLA   #string_copy
     64          						break;
     65          					/*//Commented out to create space
     66          					case ZERO://Setup
     67          						string_copy(ZERO,  "  START   ");
     68          						break;
     69          					case ONE://Intercept Line
     70          						string_copy(ZERO,  "INTERCEPT ");
     71          						break;
     72          					case FOUR://Intercept delay
     73          						string_copy(ZERO,  " WAITTING ");
     74          						break;
     75          					case FIVE://Alignment
     76          						string_copy(ZERO,  "ALIGNMENT ");
     77          						break;
     78          					case SIX://Follow Line
     79          						string_copy(ZERO,  "BL_TRAVEL ");
     80          						break;
     81          					case SEVEN://Intercept delay
     82          						string_copy(ZERO,  " WAITTING ");
     83          						break;
     84          					case EIGHT://Go To Middle
     85          						string_copy(ZERO,  "BL_CIRCLE ");
     86          						break;
     87          					case NINE:
     88          						string_copy(ZERO,  " BL_EXIT  ");
     89          						break;
     90          					case TEN:
     91          						string_copy(ZERO,  " BL_STOP  ");
     92          						break;
     93          					case ELEVEN:
     94          						string_copy(ZERO,  " BL_STOP  ");
     95          						break;
     96          					*/
     97          					default: break;
     98          				}
     99          				if(operation != FIVE){
   \                     ??displays_1:
   \   00012A   B2900500.... CMP.W   #0x5, &operation
   \   000130   2125         JEQ     ??displays_16
    100          					operation = FIVE;
   \   000132   B2400500.... MOV.W   #0x5, &operation
   \   000138   1D3D         JMP     ??displays_16
    101          				}
    102          			}else{
    103          				string_copy(ZERO,   "LINE_FOLLW");
   \                     ??displays_29:
   \   00013A   3D40....     MOV.W   #`?<Constant "LINE_FOLLW">`, R13
   \   00013E   0C43         MOV.W   #0x0, R12
   \   000140   ........     CALLA   #string_copy
    104          				string_copy(ONE,    "          ");
   \   000144   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000148   1C43         MOV.W   #0x1, R12
   \   00014A   ........     CALLA   #string_copy
    105          				string_copy(TWO,    "          ");
   \   00014E   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000152   2C43         MOV.W   #0x2, R12
   \   000154   ........     CALLA   #string_copy
    106          				string_copy(THREE,  "          ");
   \   000158   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   00015C   3C400300     MOV.W   #0x3, R12
   \   000160   ........     CALLA   #string_copy
    107          			}
    108          			break;
   \   000164   073D         JMP     ??displays_16
    109          		case FOUR://Serial Communications
    110          			if(run_display == HIGH){
   \                     ??displays_19:
   \   000166   F2904800.... CMP.B   #0x48, &run_display
   \   00016C   1A20         JNE     ??displays_30
    111          				switch(operation_state){
   \   00016E   1F42....     MOV.W   &operation_state, R15
   \   000172   0F83         SUB.W   #0x0, R15
   \   000174   0524         JEQ     ??displays_31
   \   000176   1F83         SUB.W   #0x1, R15
   \   000178   0E24         JEQ     ??displays_2
   \   00017A   2F82         SUB.W   #0x4, R15
   \   00017C   0724         JEQ     ??displays_32
   \   00017E   0B3C         JMP     ??displays_2
    112          					case ZERO://Setup
    113          						string_copy(ONE,  "  SETUP   ");
   \                     ??displays_31:
   \   000180   3D40....     MOV.W   #`?<Constant "  SETUP   ">`, R13
   \   000184   1C43         MOV.W   #0x1, R12
   \   000186   ........     CALLA   #string_copy
    114          						break;
   \   00018A   053C         JMP     ??displays_2
    115          					case ONE:
    116          						break;
    117          					case FIVE://Send AT
    118          						string_copy(ONE, "    AT    ");
   \                     ??displays_32:
   \   00018C   3D40....     MOV.W   #`?<Constant "    AT    ">`, R13
   \   000190   1C43         MOV.W   #0x1, R12
   \   000192   ........     CALLA   #string_copy
    119          						break;
    120          					/*Commented out for space
    121          					case SIX://Send "AT+WSYNCINTRL=65535"
    122          						string_copy(ONE, "AT+WSYNCIN");
    123          						break;
    124          					case SEVEN://Send "AT+PING=Google.com,1\r"
    125          						string_copy(ONE, "AT+PING=Go");
    126          						break;
    127          					case ELEVEN://Send "AT+NSTCP=5535,1"
    128          						string_copy(ONE, "AT+NSTCP=5");
    129          						break;
    130          					case TWELVE://Send "AT+NSTAT=?"
    131          						string_copy(ONE, "AT+NSTAT=?");
    132          						break;
    133          						*/
    134          					default: break;
    135          				}
    136          				//strcpy(display_line[ZERO], (char*) USB_Char_Rx);
    137          				if(operation != FOUR){
   \                     ??displays_2:
   \   000196   A292....     CMP.W   #0x4, &operation
   \   00019A   EC24         JEQ     ??displays_16
    138          					operation = FOUR;
   \   00019C   A242....     MOV.W   #0x4, &operation
   \   0001A0   E93C         JMP     ??displays_16
    139          				}
    140          			}else{
    141          				string_copy(ZERO,   "SERIAL_COM");
   \                     ??displays_30:
   \   0001A2   3D40....     MOV.W   #`?<Constant "SERIAL_COM">`, R13
   \   0001A6   0C43         MOV.W   #0x0, R12
   \   0001A8   ........     CALLA   #string_copy
    142          				string_copy(ONE,    "          ");
   \   0001AC   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   0001B0   1C43         MOV.W   #0x1, R12
   \   0001B2   ........     CALLA   #string_copy
    143          				string_copy(TWO,    "          ");
   \   0001B6   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   0001BA   2C43         MOV.W   #0x2, R12
   \   0001BC   ........     CALLA   #string_copy
    144          				string_copy(THREE,  "          ");
   \   0001C0   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   0001C4   3C400300     MOV.W   #0x3, R12
   \   0001C8   ........     CALLA   #string_copy
    145          			}
    146          			break;
   \   0001CC   D33C         JMP     ??displays_16
    147          		case THREE://WIFI_COM
    148          			if(run_display == HIGH){
   \                     ??displays_18:
   \   0001CE   F2904800.... CMP.B   #0x48, &run_display
   \   0001D4   6820         JNE     ??displays_33
    149          				switch(operation_state){
   \   0001D6   1F42....     MOV.W   &operation_state, R15
   \   0001DA   0F83         SUB.W   #0x0, R15
   \   0001DC   0724         JEQ     ??displays_34
   \   0001DE   1F83         SUB.W   #0x1, R15
   \   0001E0   5424         JEQ     ??displays_3
   \   0001E2   1F83         SUB.W   #0x1, R15
   \   0001E4   5224         JEQ     ??displays_3
   \   0001E6   1F83         SUB.W   #0x1, R15
   \   0001E8   1124         JEQ     ??displays_35
   \   0001EA   4F3C         JMP     ??displays_3
    150          					case ZERO://Setup
    151          						//string_copy(ZERO,  SSID_temp);
    152          						//string_copy(ONE, "IP ADDRESS");
    153          						string_copy(ZERO,    " WAITTING ");
   \                     ??displays_34:
   \   0001EC   3D40....     MOV.W   #`?<Constant " WAITTING ">`, R13
   \   0001F0   0C43         MOV.W   #0x0, R12
   \   0001F2   ........     CALLA   #string_copy
    154          						string_copy(ONE,  IP_addr1);
   \   0001F6   3D40....     MOV.W   #IP_addr1, R13
   \   0001FA   1C43         MOV.W   #0x1, R12
   \   0001FC   ........     CALLA   #string_copy
    155          						string_copy(TWO,  IP_addr2);
   \   000200   3D40....     MOV.W   #IP_addr2, R13
   \   000204   2C43         MOV.W   #0x2, R12
   \   000206   ........     CALLA   #string_copy
    156          						break;
   \   00020A   3F3C         JMP     ??displays_3
    157          					case ONE:
    158          						break;
    159          					case TWO:
    160          						switch(station){
    161          							/*Commented out for space
    162          							case ZERO:
    163          								break;
    164          							case ONE:
    165          								string_copy(ZERO,    "STATION 1 ");
    166          								break;
    167          							case TWO:
    168          								string_copy(ZERO,    "STATION 2 ");
    169          								break;
    170          							case THREE:
    171          								string_copy(ZERO,    "STATION 3 ");
    172          								break;
    173          							case FOUR:
    174          								string_copy(ZERO,    "STATION 4 ");
    175          								break;
    176          							case FIVE:
    177          								string_copy(ZERO,    "STATION 5 ");
    178          								break;
    179          							case SIX:
    180          								string_copy(ZERO,    "STATION 6 ");
    181          								break;
    182          							case SEVEN:
    183          								string_copy(ZERO,    "STATION 7 ");
    184          								break;
    185          							case EIGHT:
    186          								string_copy(ZERO,    "STATION 8 ");
    187          								break;
    188          							*/
    189          							default: break;
    190          						}
    191          						break;
    192          					case THREE://WiFi movement commands
    193          						switch(command[command_index+FOUR]){
   \                     ??displays_35:
   \   00020C   1F42....     MOV.W   &command_index, R15
   \   000210   5E4F....     MOV.B   command + 4(R15), R14
   \   000214   7E804100     SUB.B   #0x41, R14
   \   000218   2724         JEQ     ??displays_36
   \   00021A   7E800300     SUB.B   #0x3, R14
   \   00021E   1E24         JEQ     ??displays_37
   \   000220   5E83         SUB.B   #0x1, R14
   \   000222   2E24         JEQ     ??displays_38
   \   000224   7E800C00     SUB.B   #0xc, R14
   \   000228   2524         JEQ     ??displays_39
   \   00022A   5E83         SUB.B   #0x1, R14
   \   00022C   0524         JEQ     ??displays_40
   \   00022E   5E83         SUB.B   #0x1, R14
   \   000230   0F24         JEQ     ??displays_41
   \   000232   6E82         SUB.B   #0x4, R14
   \   000234   0724         JEQ     ??displays_42
   \   000236   293C         JMP     ??displays_3
    194          							case 'R':
    195          								string_copy(ZERO,    "   STOP   ");
   \                     ??displays_40:
   \   000238   3D40....     MOV.W   #`?<Constant "   STOP   ">`, R13
   \   00023C   0C43         MOV.W   #0x0, R12
   \   00023E   ........     CALLA   #string_copy
    196          								break;
   \   000242   233C         JMP     ??displays_3
    197          							case 'W':
    198          								string_copy(ZERO,    " STRAIGHT ");
   \                     ??displays_42:
   \   000244   3D40....     MOV.W   #`?<Constant " STRAIGHT ">`, R13
   \   000248   0C43         MOV.W   #0x0, R12
   \   00024A   ........     CALLA   #string_copy
    199          								break;
   \   00024E   1D3C         JMP     ??displays_3
    200          							case 'S':
    201          								string_copy(ZERO,    " REVERSE  ");
   \                     ??displays_41:
   \   000250   3D40....     MOV.W   #`?<Constant " REVERSE  ">`, R13
   \   000254   0C43         MOV.W   #0x0, R12
   \   000256   ........     CALLA   #string_copy
    202          								break;
   \   00025A   173C         JMP     ??displays_3
    203          							case 'D':
    204          								string_copy(ZERO,    "CLOCKWISE ");
   \                     ??displays_37:
   \   00025C   3D40....     MOV.W   #`?<Constant "CLOCKWISE ">`, R13
   \   000260   0C43         MOV.W   #0x0, R12
   \   000262   ........     CALLA   #string_copy
    205          								break;
   \   000266   113C         JMP     ??displays_3
    206          							case 'A':
    207          								string_copy(ZERO,    " CC_WISE  ");
   \                     ??displays_36:
   \   000268   3D40....     MOV.W   #`?<Constant " CC_WISE  ">`, R13
   \   00026C   0C43         MOV.W   #0x0, R12
   \   00026E   ........     CALLA   #string_copy
    208          								break;
   \   000272   0B3C         JMP     ??displays_3
    209          							case 'Q':
    210          								string_copy(ZERO,    " ARC_LEFT ");
   \                     ??displays_39:
   \   000274   3D40....     MOV.W   #`?<Constant " ARC_LEFT ">`, R13
   \   000278   0C43         MOV.W   #0x0, R12
   \   00027A   ........     CALLA   #string_copy
    211          								break;
   \   00027E   053C         JMP     ??displays_3
    212          							case 'E':
    213          								string_copy(ZERO,    "ARC_RIGHT ");
   \                     ??displays_38:
   \   000280   3D40....     MOV.W   #`?<Constant "ARC_RIGHT ">`, R13
   \   000284   0C43         MOV.W   #0x0, R12
   \   000286   ........     CALLA   #string_copy
    214          								break;
    215          							default: break;
    216          						}
    217          						break;
    218          					default: break;
    219          				}
    220          				string_copy(THREE,   adc_char_timer);
   \                     ??displays_3:
   \   00028A   3D40....     MOV.W   #adc_char_timer, R13
   \   00028E   3C400300     MOV.W   #0x3, R12
   \   000292   ........     CALLA   #string_copy
    221          				if(operation != THREE){
   \   000296   B2900300.... CMP.W   #0x3, &operation
   \   00029C   6B24         JEQ     ??displays_16
    222          					operation = THREE;
   \   00029E   B2400300.... MOV.W   #0x3, &operation
   \   0002A4   673C         JMP     ??displays_16
    223          				}
    224          			}else{
    225          				string_copy(ZERO,   " WIFI_COM ");
   \                     ??displays_33:
   \   0002A6   3D40....     MOV.W   #`?<Constant " WIFI_COM ">`, R13
   \   0002AA   0C43         MOV.W   #0x0, R12
   \   0002AC   ........     CALLA   #string_copy
    226          				string_copy(ONE,    "          ");
   \   0002B0   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   0002B4   1C43         MOV.W   #0x1, R12
   \   0002B6   ........     CALLA   #string_copy
    227          				string_copy(TWO,    "          ");
   \   0002BA   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   0002BE   2C43         MOV.W   #0x2, R12
   \   0002C0   ........     CALLA   #string_copy
    228          				string_copy(THREE,  "          ");
   \   0002C4   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   0002C8   3C400300     MOV.W   #0x3, R12
   \   0002CC   ........     CALLA   #string_copy
    229          			}
    230          			break;
   \   0002D0   513C         JMP     ??displays_16
    231          		case TWO://Pulse Width Modulation (PWM)
    232          			if(run_display == HIGH){
   \                     ??displays_17:
   \   0002D2   F2904800.... CMP.B   #0x48, &run_display
   \   0002D8   3820         JNE     ??displays_43
    233          				switch(operation_state){
   \   0002DA   1F42....     MOV.W   &operation_state, R15
   \   0002DE   0F83         SUB.W   #0x0, R15
   \   0002E0   0C24         JEQ     ??displays_44
   \   0002E2   1F83         SUB.W   #0x1, R15
   \   0002E4   1024         JEQ     ??displays_45
   \   0002E6   2F83         SUB.W   #0x2, R15
   \   0002E8   1424         JEQ     ??displays_46
   \   0002EA   2F83         SUB.W   #0x2, R15
   \   0002EC   1824         JEQ     ??displays_47
   \   0002EE   2F83         SUB.W   #0x2, R15
   \   0002F0   1C24         JEQ     ??displays_48
   \   0002F2   3F800F00     SUB.W   #0xf, R15
   \   0002F6   1E24         JEQ     ??displays_49
   \   0002F8   223C         JMP     ??displays_5
    234          					case ZERO://Setup
    235          						string_copy(ONE,  "  SETUP   ");
   \                     ??displays_44:
   \   0002FA   3D40....     MOV.W   #`?<Constant "  SETUP   ">`, R13
   \   0002FE   1C43         MOV.W   #0x1, R12
   \   000300   ........     CALLA   #string_copy
    236          						break;
   \   000304   1C3C         JMP     ??displays_5
    237          					case STRAIGHT:
    238          						string_copy(ONE,  " STRAIGHT ");
   \                     ??displays_45:
   \   000306   3D40....     MOV.W   #`?<Constant " STRAIGHT ">`, R13
   \   00030A   1C43         MOV.W   #0x1, R12
   \   00030C   ........     CALLA   #string_copy
    239          						break;
   \   000310   163C         JMP     ??displays_5
    240          					case REVERSE:
    241          						string_copy(ONE,  " REVERSE  ");
   \                     ??displays_46:
   \   000312   3D40....     MOV.W   #`?<Constant " REVERSE  ">`, R13
   \   000316   1C43         MOV.W   #0x1, R12
   \   000318   ........     CALLA   #string_copy
    242          						break;
   \   00031C   103C         JMP     ??displays_5
    243          					case CLOCKWISE:
    244          						string_copy(ONE,  "CLOCKWISE ");
   \                     ??displays_47:
   \   00031E   3D40....     MOV.W   #`?<Constant "CLOCKWISE ">`, R13
   \   000322   1C43         MOV.W   #0x1, R12
   \   000324   ........     CALLA   #string_copy
    245          						break;
   \   000328   0A3C         JMP     ??displays_5
    246          					case COUNTER_CLOCKWISE:
    247          						string_copy(ONE,  " CC_WISE  ");
   \                     ??displays_48:
   \   00032A   3D40....     MOV.W   #`?<Constant " CC_WISE  ">`, R13
   \   00032E   1C43         MOV.W   #0x1, R12
   \   000330   ........     CALLA   #string_copy
    248          					case OFF:
    249          						string_copy(ONE,  "   OFF    ");
   \                     ??displays_49:
   \   000334   3D40....     MOV.W   #`?<Constant "   OFF    ">`, R13
   \   000338   1C43         MOV.W   #0x1, R12
   \   00033A   ........     CALLA   #string_copy
    250          					default:
    251          						break;
    252          				}
    253          				if(operation != TWO){
   \                     ??displays_5:
   \   00033E   A293....     CMP.W   #0x2, &operation
   \   000342   1824         JEQ     ??displays_16
    254          					operation = TWO;
   \   000344   A243....     MOV.W   #0x2, &operation
   \   000348   153C         JMP     ??displays_16
    255          				}
    256          			}else{
    257          				string_copy(ZERO,   "   PWM    ");
   \                     ??displays_43:
   \   00034A   3D40....     MOV.W   #`?<Constant "   PWM    ">`, R13
   \   00034E   0C43         MOV.W   #0x0, R12
   \   000350   ........     CALLA   #string_copy
    258          				string_copy(ONE,    "          ");
   \   000354   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000358   1C43         MOV.W   #0x1, R12
   \   00035A   ........     CALLA   #string_copy
    259          				string_copy(TWO,    "          ");
   \   00035E   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000362   2C43         MOV.W   #0x2, R12
   \   000364   ........     CALLA   #string_copy
    260          				string_copy(THREE,  "          ");
   \   000368   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   00036C   3C400300     MOV.W   #0x3, R12
   \   000370   ........     CALLA   #string_copy
    261          			}
    262          			break;
    263          		default: break;
    264          	}
    265          	display_changed = HIGH;
   \                     ??displays_16:
   \   000374   F2404800.... MOV.B   #0x48, &display_changed
    266          }
   \   00037A   3A41         POP.W   R10
   \   00037C   1001         RETA
    267          

   \                                 In  segment CODE, align 2
    268          void string_copy(unsigned int line, char* string){
   \                     string_copy:
   \   000000   1B15         PUSHM.W #0x2, R11
   \   000002   0A4C         MOV.W   R12, R10
   \   000004   0B4D         MOV.W   R13, R11
    269          	strcpy(display_line[line], string);
   \   000006   0D4B         MOV.W   R11, R13
   \   000008   0C4A         MOV.W   R10, R12
   \   00000A                RPT     #0xa
   \   00000A   49180C5A     ADDX.W  R10, R12
   \   00000E   3C50....     ADD.W   #display_line, R12
   \   000012   ........     CALLA   #strcpy
    270          }
   \   000016   1A17         POPM.W  #0x2, R11
   \   000018   1001         RETA

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  HELLO!  ">`:
   \   000000   202048454C4C DC8 "  HELLO!  "
   \            4F21202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "JOHNATHAN!">`:
   \   000000   4A4F484E4154 DC8 "JOHNATHAN!"
   \            48414E2100  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " I AM BOB ">`:
   \   000000   204920414D20 DC8 " I AM BOB "
   \            424F422000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " JRWILDE2 ">`:
   \   000000   204A5257494C DC8 " JRWILDE2 "
   \            4445322000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "EMITTR_OFF">`:
   \   000000   454D49545452 DC8 "EMITTR_OFF"
   \            5F4F464600  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "EMITTR_ON ">`:
   \   000000   454D49545452 DC8 "EMITTR_ON "
   \            5F4F4E2000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "LEFT RIGHT">`:
   \   000000   4C4546542052 DC8 "LEFT RIGHT"
   \            4947485400  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "WHITE_CAL ">`:
   \   000000   57484954455F DC8 "WHITE_CAL "
   \            43414C2000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "BLACK_CAL ">`:
   \   000000   424C41434B5F DC8 "BLACK_CAL "
   \            43414C2000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "LINE_DETEC">`:
   \   000000   4C494E455F44 DC8 "LINE_DETEC"
   \            4554454300  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "LINE_FOLLW">`:
   \   000000   4C494E455F46 DC8 "LINE_FOLLW"
   \            4F4C4C5700  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  SETUP   ">`:
   \   000000   202053455455 DC8 "  SETUP   "
   \            5020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "    AT    ">`:
   \   000000   202020204154 DC8 "    AT    "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "SERIAL_COM">`:
   \   000000   53455249414C DC8 "SERIAL_COM"
   \            5F434F4D00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " WAITTING ">`:
   \   000000   205741495454 DC8 " WAITTING "
   \            494E472000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "   STOP   ">`:
   \   000000   20202053544F DC8 "   STOP   "
   \            5020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " STRAIGHT ">`:
   \   000000   205354524149 DC8 " STRAIGHT "
   \            4748542000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " REVERSE  ">`:
   \   000000   205245564552 DC8 " REVERSE  "
   \            5345202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "CLOCKWISE ">`:
   \   000000   434C4F434B57 DC8 "CLOCKWISE "
   \            4953452000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " CC_WISE  ">`:
   \   000000   2043435F5749 DC8 " CC_WISE  "
   \            5345202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " ARC_LEFT ">`:
   \   000000   204152435F4C DC8 " ARC_LEFT "
   \            4546542000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "ARC_RIGHT ">`:
   \   000000   4152435F5249 DC8 "ARC_RIGHT "
   \            4748542000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " WIFI_COM ">`:
   \   000000   20574946495F DC8 " WIFI_COM "
   \            434F4D2000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "   OFF    ">`:
   \   000000   2020204F4646 DC8 "   OFF    "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "   PWM    ">`:
   \   000000   20202050574D DC8 "   PWM    "
   \            2020202000  

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      6   displays
        6   -> HEXtoBCD
        6   -> string_copy
      8   string_copy
        8   -> strcpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
      11  ?<Constant "    AT    ">
      11  ?<Constant "   OFF    ">
      11  ?<Constant "   PWM    ">
      11  ?<Constant "   STOP   ">
      11  ?<Constant "  HELLO!  ">
      11  ?<Constant "  SETUP   ">
      11  ?<Constant " ARC_LEFT ">
      11  ?<Constant " CC_WISE  ">
      11  ?<Constant " I AM BOB ">
      11  ?<Constant " JRWILDE2 ">
      11  ?<Constant " REVERSE  ">
      11  ?<Constant " STRAIGHT ">
      11  ?<Constant " WAITTING ">
      11  ?<Constant " WIFI_COM ">
      11  ?<Constant "ARC_RIGHT ">
      11  ?<Constant "BLACK_CAL ">
      11  ?<Constant "CLOCKWISE ">
      11  ?<Constant "EMITTR_OFF">
      11  ?<Constant "EMITTR_ON ">
      11  ?<Constant "JOHNATHAN!">
      11  ?<Constant "LEFT RIGHT">
      11  ?<Constant "LINE_DETEC">
      11  ?<Constant "LINE_FOLLW">
      11  ?<Constant "SERIAL_COM">
      11  ?<Constant "WHITE_CAL ">
     894  displays
      26  string_copy

 
 920 bytes in segment CODE
 286 bytes in segment DATA16_C
 
 920 bytes of CODE  memory
 286 bytes of CONST memory

Errors: none
Warnings: 1
